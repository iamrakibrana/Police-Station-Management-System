/// <reference types="node" />

import type { Agent } from 'node:http';
import type { BuildOptions as BuildOptions_2 } from 'esbuild';
import { ChunkMetadata } from "../../types/metadata.js";
import type { ClientRequest } from 'node:http';
import type { ClientRequestArgs } from 'node:http';
import { ConnectedPayload } from "../../types/hmrPayload.js";
import { CustomEventMap } from "../../types/customEvent.js";
import { CustomPayload } from "../../types/hmrPayload.js";
import type { CustomPluginOptions } from 'rollup';
import type { Duplex } from 'node:stream';
import type { DuplexOptions } from 'node:stream';
import { ErrorPayload } from "../../types/hmrPayload.js";
import { TransformOptions as EsbuildTransformOptions } from 'esbuild';
import { version as esbuildVersion } from 'esbuild';
import { EventEmitter } from 'node:events';
import * as events from 'node:events';
import type { ExistingRawSourceMap } from 'rollup';
import type * as fs from 'node:fs';
import { FullReloadPayload } from "../../types/hmrPayload.js";
import { GeneralImportGlobOptions } from "../../types/importGlob.js";
import type { GetManualChunk } from 'rollup';
import { HMRPayload } from "../../types/hmrPayload.js";
import * as http from 'node:http';
import { ImportGlobEagerFunction } from "../../types/importGlob.js";
import { ImportGlobFunction } from "../../types/importGlob.js";
import { ImportGlobOptions } from "../../types/importGlob.js";
import type { IncomingMessage } from 'node:http';
import { InferCustomEventPayload } from "../../types/customEvent.js";
import type { InputOption } from 'rollup';
import type { InputOptions } from 'rollup';
import { InvalidatePayload } from "../../types/customEvent.js";
import { KnownAsTypeMap } from "../../types/importGlob.js";
import type { LoadResult } from 'rollup';

import type { ModuleFormat } from 'rollup';
import type { ModuleInfo } from 'rollup';
import type * as net from 'node:net';
import type { ObjectHook } from 'rollup';
import type { OutgoingHttpHeaders } from 'node:http';
import type { OutputBundle } from 'rollup';
import type { OutputChunk } from 'rollup';
import type { PartialResolvedId } from 'rollup';
import type { Plugin as Plugin_3 } from 'rollup';
import type { PluginContext } from 'rollup';
import type { PluginHooks } from 'rollup';
import type * as PostCSS from 'postcss';
import { PrunePayload } from "../../types/hmrPayload.js";
import type { ResolveIdResult } from 'rollup';
import type * as Rollup from 'rollup';
import type { RollupError } from 'rollup';
import type { RollupOptions } from 'rollup';
import type { RollupOutput } from 'rollup';
import { VERSION as rollupVersion } from 'rollup';
import type { RollupWatcher } from 'rollup';
import type { SecureContextOptions } from 'node:tls';
import type { Server } from 'node:http';
import type { Server as Server_2 } from 'node:https';
import type { ServerOptions as ServerOptions_2 } from 'node:https';
import type { ServerResponse } from 'node:http';
import type { SourceDescription } from 'rollup';
import type { SourceMap } from 'rollup';
import type { SourceMapInput } from 'rollup';
import type * as stream from 'node:stream';
import type { TransformPluginContext } from 'rollup';
import type { TransformResult as TransformResult_2 } from 'rollup';
import type { TransformResult as TransformResult_3 } from 'esbuild';
import { Update } from "../../types/hmrPayload.js";
import { UpdatePayload } from "../../types/hmrPayload.js";
import type * as url from 'node:url';
import type { URL as URL_2 } from 'node:url';
import type { WatcherOptions } from 'rollup';
import type { ZlibOptions } from 'node:zlib';

export declare interface Alias {
    find: string | RegExp
    replacement: string
    /**
     * Instructs the plugin to use an alternative resolving algorithm,
     * rather than the Rollup's resolver.
     * @default null
     */
    customResolver?: ResolverFunction | ResolverObject | null
}

/**
 * Specifies an `Object`, or an `Array` of `Object`,
 * which defines aliases used to replace values in `import` or `require` statements.
 * With either format, the order of the entries is important,
 * in that the first defined rules are applied first.
 *
 * This is passed to \@rollup/plugin-alias as the "entries" field
 * https://github.com/rollup/plugins/tree/master/packages/alias#entries
 */
export declare type AliasOptions = readonly Alias[] | { [find: string]: string }

export declare type AnymatchFn = (testString: string) => boolean

export declare type AnymatchPattern = string | RegExp | AnymatchFn

/**
 * spa: include SPA fallback middleware and configure sirv with `single: true` in preview
 *
 * mpa: only include non-SPA HTML middlewares
 *
 * custom: don't include HTML middlewares
 */
export declare type AppType = 'spa' | 'mpa' | 'custom';

export declare interface AwaitWriteFinishOptions {
    /**
     * Amount of time in milliseconds for a file size to remain constant before emitting its event.
     */
    stabilityThreshold?: number

    /**
     * File size polling interval.
     */
    pollInterval?: number
}

/**
 * Bundles the app for production.
 * Returns a Promise containing the build result.
 */
export declare function build(inlineConfig?: InlineConfig): Promise<RollupOutput | RollupOutput[] | RollupWatcher>;

export declare function buildErrorMessage(err: RollupError, args?: string[], includeStack?: boolean): string;

export declare interface BuildOptions {
    /**
     * Compatibility transform target. The transform is performed with esbuild
     * and the lowest supported target is es2015/es6. Note this only handles
     * syntax transformation and does not cover polyfills (except for dynamic
     * import)
     *
     * Default: 'modules' - Similar to `@babel/preset-env`'s targets.esmodules,
     * transpile targeting browsers that natively support dynamic es module imports.
     * https://caniuse.com/es6-module-dynamic-import
     *
     * Another special value is 'esnext' - which only performs minimal transpiling
     * (for minification compat) and assumes native dynamic imports support.
     *
     * For custom targets, see https://esbuild.github.io/api/#target and
     * https://esbuild.github.io/content-types/#javascript for more details.
     * @default 'modules'
     */
    target?: 'modules' | EsbuildTransformOptions['target'] | false;
    /**
     * whether to inject module preload polyfill.
     * Note: does not apply to library mode.
     * @default true
     * @deprecated use `modulePreload.polyfill` instead
     */
    polyfillModulePreload?: boolean;
    /**
     * Configure module preload
     * Note: does not apply to library mode.
     * @default true
     */
    modulePreload?: boolean | ModulePreloadOptions;
    /**
     * Directory relative from `root` where build output will be placed. If the
     * directory exists, it will be removed before the build.
     * @default 'dist'
     */
    outDir?: string;
    /**
     * Directory relative from `outDir` where the built js/css/image assets will
     * be placed.
     * @default 'assets'
     */
    assetsDir?: string;
    /**
     * Static asset files smaller than this number (in bytes) will be inlined as
     * base64 strings. Default limit is `4096` (4kb). Set to `0` to disable.
     * @default 4096
     */
    assetsInlineLimit?: number;
    /**
     * Whether to code-split CSS. When enabled, CSS in async chunks will be
     * inlined as strings in the chunk and inserted via dynamically created
     * style tags when the chunk is loaded.
     * @default true
     */
    cssCodeSplit?: boolean;
    /**
     * An optional separate target for CSS minification.
     * As esbuild only supports configuring targets to mainstream
     * browsers, users may need this option when they are targeting
     * a niche browser that comes with most modern JavaScript features
     * but has poor CSS support, e.g. Android WeChat WebView, which
     * doesn't support the #RGBA syntax.
     * @default target
     */
    cssTarget?: EsbuildTransformOptions['target'] | false;
    /**
     * Override CSS minification specifically instead of defaulting to `build.minify`,
     * so you can configure minification for JS and CSS separately.
     * @default 'esbuild'
     */
    cssMinify?: boolean | 'esbuild' | 'lightningcss';
    /**
     * If `true`, a separate sourcemap file will be created. If 'inline', the
     * sourcemap will be appended to the resulting output file as data URI.
     * 'hidden' works like `true` except that the corresponding sourcemap
     * comments in the bundled files are suppressed.
     * @default false
     */
    sourcemap?: boolean | 'inline' | 'hidden';
    /**
     * Set to `false` to disable minification, or specify the minifier to use.
     * Available options are 'terser' or 'esbuild'.
     * @default 'esbuild'
     */
    minify?: boolean | 'terser' | 'esbuild';
    /**
     * Options for terser
     * https://terser.org/docs/api-reference#minify-options
     */
    terserOptions?: Terser.MinifyOptions;
    /**
     * Will be merged with internal rollup options.
     * https://rollupjs.org/configuration-options/
     */
    rollupOptions?: RollupOptions;
    /**
     * Options to pass on to `@rollup/plugin-commonjs`
     */
    commonjsOptions?: RollupCommonJSOptions;
    /**
     * Options to pass on to `@rollup/plugin-dynamic-import-vars`
     */
    dynamicImportVarsOptions?: RollupDynamicImportVarsOptions;
    /**
     * Whether to write bundle to disk
     * @default true
     */
    write?: boolean;
    /**
     * Empty outDir on write.
     * @default true when outDir is a sub directory of project root
     */
    emptyOutDir?: boolean | null;
    /**
     * Copy the public directory to outDir on write.
     * @default true
     * @experimental
     */
    copyPublicDir?: boolean;
    /**
     * Whether to emit a manifest.json under assets dir to map hash-less filenames
     * to their hashed versions. Useful when you want to generate your own HTML
     * instead of using the one generated by Vite.
     *
     * Example:
     *
     * ```json
     * {
     *   "main.js": {
     *     "file": "main.68fe3fad.js",
     *     "css": "main.e6b63442.css",
     *     "imports": [...],
     *     "dynamicImports": [...]
     *   }
     * }
     * ```
     * @default false
     */
    manifest?: boolean | string;
    /**
     * Build in library mode. The value should be the global name of the lib in
     * UMD mode. This will produce esm + cjs + umd bundle formats with default
     * configurations that are suitable for distributing libraries.
     * @default false
     */
    lib?: LibraryOptions | false;
    /**
     * Produce SSR oriented build. Note this requires specifying SSR entry via
     * `rollupOptions.input`.
     * @default false
     */
    ssr?: boolean | string;
    /**
     * Generate SSR manifest for determining style links and asset preload
     * directives in production.
     * @default false
     */
    ssrManifest?: boolean | string;
    /**
     * Emit assets during SSR.
     * @experimental
     * @default false
     */
    ssrEmitAssets?: boolean;
    /**
     * Set to false to disable reporting compressed chunk sizes.
     * Can slightly improve build speed.
     * @default true
     */
    reportCompressedSize?: boolean;
    /**
     * Adjust chunk size warning limit (in kbs).
     * @default 500
     */
    chunkSizeWarningLimit?: number;
    /**
     * Rollup watch options
     * https://rollupjs.org/configuration-options/#watch
     * @default null
     */
    watch?: WatcherOptions | null;
}

export { ChunkMetadata }

export declare interface CommonServerOptions {
    /**
     * Specify server port. Note if the port is already being used, Vite will
     * automatically try the next available port so this may not be the actual
     * port the server ends up listening on.
     */
    port?: number;
    /**
     * If enabled, vite will exit if specified port is already in use
     */
    strictPort?: boolean;
    /**
     * Specify which IP addresses the server should listen on.
     * Set to 0.0.0.0 to listen on all addresses, including LAN and public addresses.
     */
    host?: string | boolean;
    /**
     * Enable TLS + HTTP/2.
     * Note: this downgrades to TLS only when the proxy option is also used.
     */
    https?: boolean | ServerOptions_2;
    /**
     * Open browser window on startup
     */
    open?: boolean | string;
    /**
     * Configure custom proxy rules for the dev server. Expects an object
     * of `{ key: options }` pairs.
     * Uses [`http-proxy`](https://github.com/http-party/node-http-proxy).
     * Full options [here](https://github.com/http-party/node-http-proxy#options).
     *
     * Example `vite.config.js`:
     * ``` js
     * module.exports = {
     *   proxy: {
     *     // string shorthand
     *     '/foo': 'http://localhost:4567/foo',
     *     // with options
     *     '/api': {
     *       target: 'http://jsonplaceholder.typicode.com',
     *       changeOrigin: true,
     *       rewrite: path => path.replace(/^\/api/, '')
     *     }
     *   }
     * }
     * ```
     */
    proxy?: Record<string, string | ProxyOptions>;
    /**
     * Configure CORS for the dev server.
     * Uses https://github.com/expressjs/cors.
     * Set to `true` to allow all methods from any origin, or configure separately
     * using an object.
     */
    cors?: CorsOptions | boolean;
    /**
     * Specify server response headers.
     */
    headers?: OutgoingHttpHeaders;
}

export declare interface ConfigEnv {
    command: 'build' | 'serve';
    mode: string;
    /**
     * @experimental
     */
    ssrBuild?: boolean;
}

export declare namespace Connect {
    export type ServerHandle = HandleFunction | http.Server

    export class IncomingMessage extends http.IncomingMessage {
        originalUrl?: http.IncomingMessage['url'] | undefined
    }

    export type NextFunction = (err?: any) => void

    export type SimpleHandleFunction = (
    req: IncomingMessage,
    res: http.ServerResponse,
    ) => void
    export type NextHandleFunction = (
    req: IncomingMessage,
    res: http.ServerResponse,
    next: NextFunction,
    ) => void
    export type ErrorHandleFunction = (
    err: any,
    req: IncomingMessage,
    res: http.ServerResponse,
    next: NextFunction,
    ) => void
    export type HandleFunction =
    | SimpleHandleFunction
    | NextHandleFunction
    | ErrorHandleFunction

    export interface ServerStackItem {
        route: string
        handle: ServerHandle
    }

    export interface Server extends NodeJS.EventEmitter {
        (req: http.IncomingMessage, res: http.ServerResponse, next?: Function): void

        route: string
        stack: ServerStackItem[]

        /**
         * Utilize the given middleware `handle` to the given `route`,
         * defaulting to _/_. This "route" is the mount-point for the
         * middleware, when given a value other than _/_ the middleware
         * is only effective when that segment is present in the request's
         * pathname.
         *
         * For example if we were to mount a function at _/admin_, it would
         * be invoked on _/admin_, and _/admin/settings_, however it would
         * not be invoked for _/_, or _/posts_.
         */
        use(fn: NextHandleFunction): Server
        use(fn: HandleFunction): Server
        use(route: string, fn: NextHandleFunction): Server
        use(route: string, fn: HandleFunction): Server

        /**
         * Handle server requests, punting them down
         * the middleware stack.
         */
        handle(
        req: http.IncomingMessage,
        res: http.ServerResponse,
        next: Function,
        ): void

        /**
         * Listen for connections.
         *
         * This method takes the same arguments
         * as node's `http.Server#listen()`.
         *
         * HTTP and HTTPS:
         *
         * If you run your application both as HTTP
         * and HTTPS you may wrap them individually,
         * since your Connect "server" is really just
         * a JavaScript `Function`.
         *
         *      var connect = require('connect')
         *        , http = require('http')
         *        , https = require('https');
         *
         *      var app = connect();
         *
         *      http.createServer(app).listen(80);
         *      https.createServer(options, app).listen(443);
         */
        listen(
        port: number,
        hostname?: string,
        backlog?: number,
        callback?: Function,
        ): http.Server
        listen(port: number, hostname?: string, callback?: Function): http.Server
        listen(path: string, callback?: Function): http.Server
        listen(handle: any, listeningListener?: Function): http.Server
    }
}

export { ConnectedPayload }

/**
 * https://github.com/expressjs/cors#configuration-options
 */
export declare interface CorsOptions {
    origin?: CorsOrigin | ((origin: string, cb: (err: Error, origins: CorsOrigin) => void) => void);
    methods?: string | string[];
    allowedHeaders?: string | string[];
    exposedHeaders?: string | string[];
    credentials?: boolean;
    maxAge?: number;
    preflightContinue?: boolean;
    optionsSuccessStatus?: number;
}

export declare type CorsOrigin = boolean | string | RegExp | (string | RegExp)[];

export declare const createFilter: (include?: FilterPattern, exclude?: FilterPattern, options?: {
    resolve?: string | false | null;
}) => (id: string | unknown) => boolean;

export declare function createLogger(level?: LogLevel, options?: LoggerOptions): Logger;

export declare function createServer(inlineConfig?: InlineConfig): Promise<ViteDevServer>;

declare interface CSSModulesConfig {
    /** The pattern to use when renaming class names and other identifiers. Default is `[hash]_[local]`. */
    pattern?: string,
    /** Whether to rename dashed identifiers, e.g. custom properties. */
    dashedIdents?: boolean
}

export declare interface CSSModulesOptions {
    getJSON?: (cssFileName: string, json: Record<string, string>, outputFileName: string) => void;
    scopeBehaviour?: 'global' | 'local';
    globalModulePaths?: RegExp[];
    generateScopedName?: string | ((name: string, filename: string, css: string) => string);
    hashPrefix?: string;
    /**
     * default: undefined
     */
    localsConvention?: 'camelCase' | 'camelCaseOnly' | 'dashes' | 'dashesOnly' | ((originalClassName: string, generatedClassName: string, inputFile: string) => string);
}

export declare interface CSSOptions {
    /**
     * Using lightningcss is an experimental option to handle CSS modules,
     * assets and imports via Lightning CSS. It requires to install it as a
     * peer dependency. This is incompatible with the use of preprocessors.
     *
     * @default 'postcss'
     * @experimental
     */
    transformer?: 'postcss' | 'lightningcss';
    /**
     * https://github.com/css-modules/postcss-modules
     */
    modules?: CSSModulesOptions | false;
    preprocessorOptions?: Record<string, any>;
    postcss?: string | (PostCSS.ProcessOptions & {
        plugins?: PostCSS.AcceptedPlugin[];
    });
    /**
     * Enables css sourcemaps during dev
     * @default false
     * @experimental
     */
    devSourcemap?: boolean;
    /**
     * @experimental
     */
    lightningcss?: LightningCSSOptions;
}

export { CustomEventMap }

export { CustomPayload }

/**
 * Type helper to make it easier to use vite.config.ts
 * accepts a direct {@link UserConfig} object, or a function that returns it.
 * The function receives a {@link ConfigEnv} object that exposes two properties:
 * `command` (either `'build'` or `'serve'`), and `mode`.
 */
export declare function defineConfig(config: UserConfig): UserConfig;

export declare function defineConfig(config: Promise<UserConfig>): Promise<UserConfig>;

export declare function defineConfig(config: UserConfigFnObject): UserConfigFnObject;

export declare function defineConfig(config: UserConfigExport): UserConfigExport;

export declare interface DepOptimizationConfig {
    /**
     * Force optimize listed dependencies (must be resolvable import paths,
     * cannot be globs).
     */
    include?: string[];
    /**
     * Do not optimize these dependencies (must be resolvable import paths,
     * cannot be globs).
     */
    exclude?: string[];
    /**
     * Forces ESM interop when importing these dependencies. Some legacy
     * packages advertise themselves as ESM but use `require` internally
     * @experimental
     */
    needsInterop?: string[];
    /**
     * Options to pass to esbuild during the dep scanning and optimization
     *
     * Certain options are omitted since changing them would not be compatible
     * with Vite's dep optimization.
     *
     * - `external` is also omitted, use Vite's `optimizeDeps.exclude` option
     * - `plugins` are merged with Vite's dep plugin
     *
     * https://esbuild.github.io/api
     */
    esbuildOptions?: Omit<BuildOptions_2, 'bundle' | 'entryPoints' | 'external' | 'write' | 'watch' | 'outdir' | 'outfile' | 'outbase' | 'outExtension' | 'metafile'>;
    /**
     * List of file extensions that can be optimized. A corresponding esbuild
     * plugin must exist to handle the specific extension.
     *
     * By default, Vite can optimize `.mjs`, `.js`, `.ts`, and `.mts` files. This option
     * allows specifying additional extensions.
     *
     * @experimental
     */
    extensions?: string[];
    /**
     * Disables dependencies optimizations, true disables the optimizer during
     * build and dev. Pass 'build' or 'dev' to only disable the optimizer in
     * one of the modes. Deps optimization is enabled by default in dev only.
     * @default 'build'
     * @experimental
     */
    disabled?: boolean | 'build' | 'dev';
    /**
     * Automatic dependency discovery. When `noDiscovery` is true, only dependencies
     * listed in `include` will be optimized. The scanner isn't run for cold start
     * in this case. CJS-only dependencies must be present in `include` during dev.
     * @default false
     * @experimental
     */
    noDiscovery?: boolean;
}

export declare interface DepOptimizationMetadata {
    /**
     * The main hash is determined by user config and dependency lockfiles.
     * This is checked on server startup to avoid unnecessary re-bundles.
     */
    hash: string;
    /**
     * The browser hash is determined by the main hash plus additional dependencies
     * discovered at runtime. This is used to invalidate browser requests to
     * optimized deps.
     */
    browserHash: string;
    /**
     * Metadata for each already optimized dependency
     */
    optimized: Record<string, OptimizedDepInfo>;
    /**
     * Metadata for non-entry optimized chunks and dynamic imports
     */
    chunks: Record<string, OptimizedDepInfo>;
    /**
     * Metadata for each newly discovered dependency after processing
     */
    discovered: Record<string, OptimizedDepInfo>;
    /**
     * OptimizedDepInfo list
     */
    depInfoList: OptimizedDepInfo[];
}

export declare type DepOptimizationOptions = DepOptimizationConfig & {
    /**
     * By default, Vite will crawl your `index.html` to detect dependencies that
     * need to be pre-bundled. If `build.rollupOptions.input` is specified, Vite
     * will crawl those entry points instead.
     *
     * If neither of these fit your needs, you can specify custom entries using
     * this option - the value should be a fast-glob pattern or array of patterns
     * (https://github.com/mrmlnc/fast-glob#basic-syntax) that are relative from
     * vite project root. This will overwrite default entries inference.
     */
    entries?: string | string[];
    /**
     * Force dep pre-optimization regardless of whether deps have changed.
     * @experimental
     */
    force?: boolean;
};

export declare interface DepOptimizationProcessing {
    promise: Promise<void>;
    resolve: () => void;
}

export declare interface DepOptimizationResult {
    metadata: DepOptimizationMetadata;
    /**
     * When doing a re-run, if there are newly discovered dependencies
     * the page reload will be delayed until the next rerun so we need
     * to be able to discard the result
     */
    commit: () => Promise<void>;
    cancel: () => void;
}

export declare interface DepsOptimizer {
    metadata: DepOptimizationMetadata;
    scanProcessing?: Promise<void>;
    registerMissingImport: (id: string, resolved: string) => OptimizedDepInfo;
    run: () => void;
    isOptimizedDepFile: (id: string) => boolean;
    isOptimizedDepUrl: (url: string) => boolean;
    getOptimizedDepId: (depInfo: OptimizedDepInfo) => string;
    delayDepsOptimizerUntil: (id: string, done: () => Promise<any>) => void;
    registerWorkersSource: (id: string) => void;
    resetRegisteredIds: () => void;
    ensureFirstRun: () => void;
    close: () => Promise<void>;
    options: DepOptimizationOptions;
}

declare interface Drafts {
    /** Whether to enable CSS nesting. */
    nesting?: boolean,
    /** Whether to enable @custom-media rules. */
    customMedia?: boolean
}

export { ErrorPayload }

export declare interface ESBuildOptions extends EsbuildTransformOptions {
    include?: string | RegExp | string[] | RegExp[];
    exclude?: string | RegExp | string[] | RegExp[];
    jsxInject?: string;
    /**
     * This option is not respected. Use `build.minify` instead.
     */
    minify?: never;
}

export { EsbuildTransformOptions }

export declare type ESBuildTransformResult = Omit<TransformResult_3, 'map'> & {
    map: SourceMap;
};

export { esbuildVersion }

export declare interface ExperimentalOptions {
    /**
     * Append fake `&lang.(ext)` when queries are specified, to preserve the file extension for following plugins to process.
     *
     * @experimental
     * @default false
     */
    importGlobRestoreExtension?: boolean;
    /**
     * Allow finegrain control over assets and public files paths
     *
     * @experimental
     */
    renderBuiltUrl?: RenderBuiltAssetUrl;
    /**
     * Enables support of HMR partial accept via `import.meta.hot.acceptExports`.
     *
     * @experimental
     * @default false
     */
    hmrPartialAccept?: boolean;
    /**
     * Skips SSR transform to make it easier to use Vite with Node ESM loaders.
     * @warning Enabling this will break normal operation of Vite's SSR in development mode.
     *
     * @experimental
     * @default false
     */
    skipSsrTransform?: boolean;
}

export declare type ExportsData = {
    hasImports: boolean;
    exports: readonly string[];
    jsxLoader?: boolean;
};

declare const enum Features {
    Nesting = 1,
    NotSelectorList = 2,
    DirSelector = 4,
    LangSelectorList = 8,
    IsSelector = 16,
    TextDecorationThicknessPercent = 32,
    MediaIntervalSyntax = 64,
    MediaRangeSyntax = 128,
    CustomMediaQueries = 256,
    ClampFunction = 512,
    ColorFunction = 1024,
    OklabColors = 2048,
    LabColors = 4096,
    P3Colors = 8192,
    HexAlphaColors = 16384,
    SpaceSeparatedColorNotation = 32768,
    FontFamilySystemUi = 65536,
    DoublePositionGradients = 131072,
    VendorPrefixes = 262144,
    LogicalProperties = 524288,
    Selectors = 31,
    MediaQueries = 448,
    Colors = 64512,
}

export declare interface FileSystemServeOptions {
    /**
     * Strictly restrict file accessing outside of allowing paths.
     *
     * Set to `false` to disable the warning
     *
     * @default true
     */
    strict?: boolean;
    /**
     * Restrict accessing files outside the allowed directories.
     *
     * Accepts absolute path or a path relative to project root.
     * Will try to search up for workspace root by default.
     */
    allow?: string[];
    /**
     * Restrict accessing files that matches the patterns.
     *
     * This will have higher priority than `allow`.
     * picomatch patterns are supported.
     *
     * @default ['.env', '.env.*', '*.crt', '*.pem']
     */
    deny?: string[];
}

/**
 * Inlined to keep `@rollup/pluginutils` in devDependencies
 */
export declare type FilterPattern = ReadonlyArray<string | RegExp> | string | RegExp | null;

export declare function formatPostcssSourceMap(rawMap: ExistingRawSourceMap, file: string): Promise<ExistingRawSourceMap>;

export declare class FSWatcher extends EventEmitter implements fs.FSWatcher {
    options: WatchOptions

    /**
     * Constructs a new FSWatcher instance with optional WatchOptions parameter.
     */
    constructor(options?: WatchOptions)

    /**
     * Add files, directories, or glob patterns for tracking. Takes an array of strings or just one
     * string.
     */
    add(paths: string | ReadonlyArray<string>): this

    /**
     * Stop watching files, directories, or glob patterns. Takes an array of strings or just one
     * string.
     */
    unwatch(paths: string | ReadonlyArray<string>): this

    /**
     * Returns an object representing all the paths on the file system being watched by this
     * `FSWatcher` instance. The object's keys are all the directories (using absolute paths unless
     * the `cwd` option was used), and the values are arrays of the names of the items contained in
     * each directory.
     */
    getWatched(): {
        [directory: string]: string[]
    }

    /**
     * Removes all listeners from watched files.
     */
    close(): Promise<void>

    on(
    event: 'add' | 'addDir' | 'change',
    listener: (path: string, stats?: fs.Stats) => void,
    ): this

    on(
    event: 'all',
    listener: (
    eventName: 'add' | 'addDir' | 'change' | 'unlink' | 'unlinkDir',
    path: string,
    stats?: fs.Stats,
    ) => void,
    ): this

    /**
     * Error occurred
     */
    on(event: 'error', listener: (error: Error) => void): this

    /**
     * Exposes the native Node `fs.FSWatcher events`
     */
    on(
    event: 'raw',
    listener: (eventName: string, path: string, details: any) => void,
    ): this

    /**
     * Fires when the initial scan is complete
     */
    on(event: 'ready', listener: () => void): this

    on(event: 'unlink' | 'unlinkDir', listener: (path: string) => void): this

    on(event: string, listener: (...args: any[]) => void): this
}

export { FullReloadPayload }

export { GeneralImportGlobOptions }

export declare function getDepOptimizationConfig(config: ResolvedConfig, ssr: boolean): DepOptimizationConfig;

export declare interface HmrContext {
    file: string;
    timestamp: number;
    modules: Array<ModuleNode>;
    read: () => string | Promise<string>;
    server: ViteDevServer;
}

export declare interface HmrOptions {
    protocol?: string;
    host?: string;
    port?: number;
    clientPort?: number;
    path?: string;
    timeout?: number;
    overlay?: boolean;
    server?: Server;
}

export { HMRPayload }

export declare type HookHandler<T> = T extends ObjectHook<infer H> ? H : T;

export declare interface HtmlTagDescriptor {
    tag: string;
    attrs?: Record<string, string | boolean | undefined>;
    children?: string | HtmlTagDescriptor[];
    /**
     * default: 'head-prepend'
     */
    injectTo?: 'head' | 'body' | 'head-prepend' | 'body-prepend';
}

export declare namespace HttpProxy {
    export type ProxyTarget = ProxyTargetUrl | ProxyTargetDetailed

    export type ProxyTargetUrl = string | Partial<url.Url>

    export interface ProxyTargetDetailed {
        host: string
        port: number
        protocol?: string | undefined
        hostname?: string | undefined
        socketPath?: string | undefined
        key?: string | undefined
        passphrase?: string | undefined
        pfx?: Buffer | string | undefined
        cert?: string | undefined
        ca?: string | undefined
        ciphers?: string | undefined
        secureProtocol?: string | undefined
    }

    export type ErrorCallback = (
    err: Error,
    req: http.IncomingMessage,
    res: http.ServerResponse,
    target?: ProxyTargetUrl,
    ) => void

    export class Server extends events.EventEmitter {
        /**
         * Creates the proxy server with specified options.
         * @param options - Config object passed to the proxy
         */
        constructor(options?: ServerOptions)

        /**
         * Used for proxying regular HTTP(S) requests
         * @param req - Client request.
         * @param res - Client response.
         * @param options - Additional options.
         */
        web(
        req: http.IncomingMessage,
        res: http.ServerResponse,
        options?: ServerOptions,
        callback?: ErrorCallback,
        ): void

        /**
         * Used for proxying regular HTTP(S) requests
         * @param req - Client request.
         * @param socket - Client socket.
         * @param head - Client head.
         * @param options - Additional options.
         */
        ws(
        req: http.IncomingMessage,
        socket: unknown,
        head: unknown,
        options?: ServerOptions,
        callback?: ErrorCallback,
        ): void

        /**
         * A function that wraps the object in a webserver, for your convenience
         * @param port - Port to listen on
         */
        listen(port: number): Server

        /**
         * A function that closes the inner webserver and stops listening on given port
         */
        close(callback?: () => void): void

        /**
         * Creates the proxy server with specified options.
         * @param options - Config object passed to the proxy
         * @returns Proxy object with handlers for `ws` and `web` requests
         */
        static createProxyServer(options?: ServerOptions): Server

        /**
         * Creates the proxy server with specified options.
         * @param options - Config object passed to the proxy
         * @returns Proxy object with handlers for `ws` and `web` requests
         */
        static createServer(options?: ServerOptions): Server

        /**
         * Creates the proxy server with specified options.
         * @param options - Config object passed to the proxy
         * @returns Proxy object with handlers for `ws` and `web` requests
         */
        static createProxy(options?: ServerOptions): Server

        addListener(event: string, listener: () => void): this
        on(event: string, listener: () => void): this
        on(event: 'error', listener: ErrorCallback): this
        on(
        event: 'start',
        listener: (
        req: http.IncomingMessage,
        res: http.ServerResponse,
        target: ProxyTargetUrl,
        ) => void,
        ): this
        on(
        event: 'proxyReq',
        listener: (
        proxyReq: http.ClientRequest,
        req: http.IncomingMessage,
        res: http.ServerResponse,
        options: ServerOptions,
        ) => void,
        ): this
        on(
        event: 'proxyRes',
        listener: (
        proxyRes: http.IncomingMessage,
        req: http.IncomingMessage,
        res: http.ServerResponse,
        ) => void,
        ): this
        on(
        event: 'proxyReqWs',
        listener: (
        proxyReq: http.ClientRequest,
        req: http.IncomingMessage,
        socket: net.Socket,
        options: ServerOptions,
        head: any,
        ) => void,
        ): this
        on(
        event: 'econnreset',
        listener: (
        err: Error,
        req: http.IncomingMessage,
        res: http.ServerResponse,
        target: ProxyTargetUrl,
        ) => void,
        ): this
        on(
        event: 'end',
        listener: (
        req: http.IncomingMessage,
        res: http.ServerResponse,
        proxyRes: http.IncomingMessage,
        ) => void,
        ): this
        on(
        event: 'close',
        listener: (
        proxyRes: http.IncomingMessage,
        proxySocket: net.Socket,
        proxyHead: any,
        ) => void,
        ): this

        once(event: string, listener: () => void): this
        removeListener(event: string, listener: () => void): this
        removeAllListeners(event?: string): this
        getMaxListeners(): number
        setMaxListeners(n: number): this
        listeners(event: string): Array<() => void>
        emit(event: string, ...args: any[]): boolean
        listenerCount(type: string): number
    }

    export interface ServerOptions {
        /** URL string to be parsed with the url module. */
        target?: ProxyTarget | undefined
        /** URL string to be parsed with the url module. */
        forward?: ProxyTargetUrl | undefined
        /** Object to be passed to http(s).request. */
        agent?: any
        /** Object to be passed to https.createServer(). */
        ssl?: any
        /** If you want to proxy websockets. */
        ws?: boolean | undefined
        /** Adds x- forward headers. */
        xfwd?: boolean | undefined
        /** Verify SSL certificate. */
        secure?: boolean | undefined
        /** Explicitly specify if we are proxying to another proxy. */
        toProxy?: boolean | undefined
        /** Specify whether you want to prepend the target's path to the proxy path. */
        prependPath?: boolean | undefined
        /** Specify whether you want to ignore the proxy path of the incoming request. */
        ignorePath?: boolean | undefined
        /** Local interface string to bind for outgoing connections. */
        localAddress?: string | undefined
        /** Changes the origin of the host header to the target URL. */
        changeOrigin?: boolean | undefined
        /** specify whether you want to keep letter case of response header key */
        preserveHeaderKeyCase?: boolean | undefined
        /** Basic authentication i.e. 'user:password' to compute an Authorization header. */
        auth?: string | undefined
        /** Rewrites the location hostname on (301 / 302 / 307 / 308) redirects, Default: null. */
        hostRewrite?: string | undefined
        /** Rewrites the location host/ port on (301 / 302 / 307 / 308) redirects based on requested host/ port.Default: false. */
        autoRewrite?: boolean | undefined
        /** Rewrites the location protocol on (301 / 302 / 307 / 308) redirects to 'http' or 'https'.Default: null. */
        protocolRewrite?: string | undefined
        /** rewrites domain of set-cookie headers. */
        cookieDomainRewrite?:
        | false
        | string
        | { [oldDomain: string]: string }
        | undefined
        /** rewrites path of set-cookie headers. Default: false */
        cookiePathRewrite?:
        | false
        | string
        | { [oldPath: string]: string }
        | undefined
        /** object with extra headers to be added to target requests. */
        headers?: { [header: string]: string } | undefined
        /** Timeout (in milliseconds) when proxy receives no response from target. Default: 120000 (2 minutes) */
        proxyTimeout?: number | undefined
        /** Timeout (in milliseconds) for incoming requests */
        timeout?: number | undefined
        /** Specify whether you want to follow redirects. Default: false */
        followRedirects?: boolean | undefined
        /** If set to true, none of the webOutgoing passes are called and it's your responsibility to appropriately return the response by listening and acting on the proxyRes event */
        selfHandleResponse?: boolean | undefined
        /** Buffer */
        buffer?: stream.Stream | undefined
    }
}

export { ImportGlobEagerFunction }

export { ImportGlobFunction }

export { ImportGlobOptions }

export declare type IndexHtmlTransform = IndexHtmlTransformHook | {
    order?: 'pre' | 'post' | null;
    /**
     * @deprecated renamed to `order`
     */
    enforce?: 'pre' | 'post';
    /**
     * @deprecated renamed to `handler`
     */
    transform: IndexHtmlTransformHook;
} | {
    order?: 'pre' | 'post' | null;
    /**
     * @deprecated renamed to `order`
     */
    enforce?: 'pre' | 'post';
    handler: IndexHtmlTransformHook;
};

export declare interface IndexHtmlTransformContext {
    /**
     * public path when served
     */
    path: string;
    /**
     * filename on disk
     */
    filename: string;
    server?: ViteDevServer;
    bundle?: OutputBundle;
    chunk?: OutputChunk;
    originalUrl?: string;
}

export declare type IndexHtmlTransformHook = (this: void, html: string, ctx: IndexHtmlTransformContext) => IndexHtmlTransformResult | void | Promise<IndexHtmlTransformResult | void>;

export declare type IndexHtmlTransformResult = string | HtmlTagDescriptor[] | {
    html: string;
    tags: HtmlTagDescriptor[];
};

export { InferCustomEventPayload }

export declare interface InlineConfig extends UserConfig {
    configFile?: string | false;
    envFile?: false;
}

export declare interface InternalResolveOptions extends Required<ResolveOptions> {
    root: string;
    isBuild: boolean;
    isProduction: boolean;
    ssrConfig?: SSROptions;
    packageCache?: PackageCache;
    /**
     * src code mode also attempts the following:
     * - resolving /xxx as URLs
     * - resolving bare imports from optimized deps
     */
    asSrc?: boolean;
    tryIndex?: boolean;
    tryPrefix?: string;
    preferRelative?: boolean;
    isRequire?: boolean;
    isFromTsImporter?: boolean;
    tryEsmOnly?: boolean;
    scan?: boolean;
    ssrOptimizeCheck?: boolean;
    getDepsOptimizer?: (ssr: boolean) => DepsOptimizer | undefined;
    shouldExternalize?: (id: string, importer?: string) => boolean | undefined;
    /* Excluded from this release type: idOnly */
}

export { InvalidatePayload }

export declare const isCSSRequest: (request: string) => boolean;

export declare function isDepsOptimizerEnabled(config: ResolvedConfig, ssr: boolean): boolean;

/**
 * Check if the url is allowed to be served, via the `server.fs` config.
 */
export declare function isFileServingAllowed(url: string, server: ViteDevServer): boolean;

export declare interface JsonOptions {
    /**
     * Generate a named export for every property of the JSON object
     * @default true
     */
    namedExports?: boolean;
    /**
     * Generate performant output as JSON.parse("stringified").
     * Enabling this will disable namedExports.
     * @default false
     */
    stringify?: boolean;
}

export { KnownAsTypeMap }

export declare interface LegacyOptions {
    /**
     * Revert vite build --ssr to the v2.9 strategy. Use CJS SSR build and v2.9 externalization heuristics
     *
     * @experimental
     * @deprecated
     * @default false
     */
    buildSsrCjsExternalHeuristics?: boolean;
}

export declare type LibraryFormats = 'es' | 'cjs' | 'umd' | 'iife';

export declare interface LibraryOptions {
    /**
     * Path of library entry
     */
    entry: InputOption;
    /**
     * The name of the exposed global variable. Required when the `formats` option includes
     * `umd` or `iife`
     */
    name?: string;
    /**
     * Output bundle formats
     * @default ['es', 'umd']
     */
    formats?: LibraryFormats[];
    /**
     * The name of the package file output. The default file name is the name option
     * of the project package.json. It can also be defined as a function taking the
     * format as an argument.
     */
    fileName?: string | ((format: ModuleFormat, entryName: string) => string);
}

/**
 * Options are spread, so you can also use options that are not typed here like
 * visitor (not exposed because it would impact too much the bundle size)
 */
export declare type LightningCSSOptions = {
    targets?: Targets
    include?: Features
    exclude?: Features
    drafts?: Drafts
    nonStandard?: NonStandard
    pseudoClasses?: PseudoClasses
    unusedSymbols?: string[]
    cssModules?: CSSModulesConfig
}

export declare function loadConfigFromFile(configEnv: ConfigEnv, configFile?: string, configRoot?: string, logLevel?: LogLevel): Promise<{
    path: string;
    config: UserConfig;
    dependencies: string[];
} | null>;

export declare function loadEnv(mode: string, envDir: string, prefixes?: string | string[]): Record<string, string>;

export declare interface LogErrorOptions extends LogOptions {
    error?: Error | RollupError | null;
}

export declare interface Logger {
    info(msg: string, options?: LogOptions): void;
    warn(msg: string, options?: LogOptions): void;
    warnOnce(msg: string, options?: LogOptions): void;
    error(msg: string, options?: LogErrorOptions): void;
    clearScreen(type: LogType): void;
    hasErrorLogged(error: Error | RollupError): boolean;
    hasWarned: boolean;
}

export declare interface LoggerOptions {
    prefix?: string;
    allowClearScreen?: boolean;
    customLogger?: Logger;
}

export declare type LogLevel = LogType | 'silent';

export declare interface LogOptions {
    clear?: boolean;
    timestamp?: boolean;
}

export declare type LogType = 'error' | 'warn' | 'info';

export declare type Manifest = Record<string, ManifestChunk>;

export declare interface ManifestChunk {
    src?: string;
    file: string;
    css?: string[];
    assets?: string[];
    isEntry?: boolean;
    isDynamicEntry?: boolean;
    imports?: string[];
    dynamicImports?: string[];
}

export declare type MapToFunction<T> = T extends Function ? T : never

export declare type Matcher = AnymatchPattern | AnymatchPattern[]

export declare function mergeAlias(a?: AliasOptions, b?: AliasOptions): AliasOptions | undefined;

export declare function mergeConfig<D extends Record<string, any>, O extends Record<string, any>>(defaults: D extends Function ? never : D, overrides: O extends Function ? never : O, isRoot?: boolean): Record<string, any>;

export declare class ModuleGraph {
    private resolveId;
    urlToModuleMap: Map<string, ModuleNode>;
    idToModuleMap: Map<string, ModuleNode>;
    fileToModulesMap: Map<string, Set<ModuleNode>>;
    safeModulesPath: Set<string>;
    /* Excluded from this release type: _unresolvedUrlToModuleMap */
    /* Excluded from this release type: _ssrUnresolvedUrlToModuleMap */
    constructor(resolveId: (url: string, ssr: boolean) => Promise<PartialResolvedId | null>);
    getModuleByUrl(rawUrl: string, ssr?: boolean): Promise<ModuleNode | undefined>;
    getModuleById(id: string): ModuleNode | undefined;
    getModulesByFile(file: string): Set<ModuleNode> | undefined;
    onFileChange(file: string): void;
    invalidateModule(mod: ModuleNode, seen?: Set<ModuleNode>, timestamp?: number, isHmr?: boolean, hmrBoundaries?: ModuleNode[]): void;
    invalidateAll(): void;
    /**
     * Update the module graph based on a module's updated imports information
     * If there are dependencies that no longer have any importers, they are
     * returned as a Set.
     */
    updateModuleInfo(mod: ModuleNode, importedModules: Set<string | ModuleNode>, importedBindings: Map<string, Set<string>> | null, acceptedModules: Set<string | ModuleNode>, acceptedExports: Set<string> | null, isSelfAccepting: boolean, ssr?: boolean): Promise<Set<ModuleNode> | undefined>;
    ensureEntryFromUrl(rawUrl: string, ssr?: boolean, setIsSelfAccepting?: boolean): Promise<ModuleNode>;
    /* Excluded from this release type: _ensureEntryFromUrl */
    createFileOnlyEntry(file: string): ModuleNode;
    resolveUrl(url: string, ssr?: boolean): Promise<ResolvedUrl>;
    /* Excluded from this release type: _getUnresolvedUrlToModule */
    /* Excluded from this release type: _setUnresolvedUrlToModule */
    /* Excluded from this release type: _resolveUrl */
}

export declare class ModuleNode {
    /**
     * Public served url path, starts with /
     */
    url: string;
    /**
     * Resolved file system path + query
     */
    id: string | null;
    file: string | null;
    type: 'js' | 'css';
    info?: ModuleInfo;
    meta?: Record<string, any>;
    importers: Set<ModuleNode>;
    clientImportedModules: Set<ModuleNode>;
    ssrImportedModules: Set<ModuleNode>;
    acceptedHmrDeps: Set<ModuleNode>;
    acceptedHmrExports: Set<string> | null;
    importedBindings: Map<string, Set<string>> | null;
    isSelfAccepting?: boolean;
    transformResult: TransformResult | null;
    ssrTransformResult: TransformResult | null;
    ssrModule: Record<string, any> | null;
    ssrError: Error | null;
    lastHMRTimestamp: number;
    lastInvalidationTimestamp: number;
    /**
     * @param setIsSelfAccepting - set `false` to set `isSelfAccepting` later. e.g. #7870
     */
    constructor(url: string, setIsSelfAccepting?: boolean);
    get importedModules(): Set<ModuleNode>;
}

export declare interface ModulePreloadOptions {
    /**
     * Whether to inject a module preload polyfill.
     * Note: does not apply to library mode.
     * @default true
     */
    polyfill?: boolean;
    /**
     * Resolve the list of dependencies to preload for a given dynamic import
     * @experimental
     */
    resolveDependencies?: ResolveModulePreloadDependenciesFn;
}

declare interface NonStandard {
    /** Whether to enable the non-standard >>> and /deep/ selector combinators used by Angular and Vue. */
    deepSelectorCombinator?: boolean
}

export declare function normalizePath(id: string): string;

export declare interface OptimizedDepInfo {
    id: string;
    file: string;
    src?: string;
    needsInterop?: boolean;
    browserHash?: string;
    fileHash?: string;
    /**
     * During optimization, ids can still be resolved to their final location
     * but the bundles may not yet be saved to disk
     */
    processing?: Promise<void>;
    /**
     * ExportData cache, discovered deps will parse the src entry to get exports
     * data used both to define if interop is needed and when pre-bundling
     */
    exportsData?: Promise<ExportsData>;
}

/**
 * Scan and optimize dependencies within a project.
 * Used by Vite CLI when running `vite optimize`.
 */
export declare function optimizeDeps(config: ResolvedConfig, force?: boolean | undefined, asCommand?: boolean): Promise<DepOptimizationMetadata>;

/** Cache for package.json resolution and package.json contents */
export declare type PackageCache = Map<string, PackageData>;

export declare interface PackageData {
    dir: string;
    hasSideEffects: (id: string) => boolean | 'no-treeshake';
    webResolvedImports: Record<string, string | undefined>;
    nodeResolvedImports: Record<string, string | undefined>;
    setResolvedCache: (key: string, entry: string, targetWeb: boolean) => void;
    getResolvedCache: (key: string, targetWeb: boolean) => string | undefined;
    data: {
        [field: string]: any;
        name: string;
        type: string;
        version: string;
        main: string;
        module: string;
        browser: string | Record<string, string | false>;
        exports: string | Record<string, any> | string[];
        imports: Record<string, any>;
        dependencies: Record<string, string>;
    };
}

/**
 * Vite plugins extends the Rollup plugin interface with a few extra
 * vite-specific options. A valid vite plugin is also a valid Rollup plugin.
 * On the contrary, a Rollup plugin may or may NOT be a valid vite universal
 * plugin, since some Rollup features do not make sense in an unbundled
 * dev server context. That said, as long as a rollup plugin doesn't have strong
 * coupling between its bundle phase and output phase hooks then it should
 * just work (that means, most of them).
 *
 * By default, the plugins are run during both serve and build. When a plugin
 * is applied during serve, it will only run **non output plugin hooks** (see
 * rollup type definition of {@link rollup#PluginHooks}). You can think of the
 * dev server as only running `const bundle = rollup.rollup()` but never calling
 * `bundle.generate()`.
 *
 * A plugin that expects to have different behavior depending on serve/build can
 * export a factory function that receives the command being run via options.
 *
 * If a plugin should be applied only for server or build, a function format
 * config file can be used to conditional determine the plugins to use.
 */
declare interface Plugin_2 extends Plugin_3 {
    /**
     * Enforce plugin invocation tier similar to webpack loaders.
     *
     * Plugin invocation order:
     * - alias resolution
     * - `enforce: 'pre'` plugins
     * - vite core plugins
     * - normal plugins
     * - vite build plugins
     * - `enforce: 'post'` plugins
     * - vite build post plugins
     */
    enforce?: 'pre' | 'post';
    /**
     * Apply the plugin only for serve or build, or on certain conditions.
     */
    apply?: 'serve' | 'build' | ((this: void, config: UserConfig, env: ConfigEnv) => boolean);
    /**
     * Modify vite config before it's resolved. The hook can either mutate the
     * passed-in config directly, or return a partial config object that will be
     * deeply merged into existing config.
     *
     * Note: User plugins are resolved before running this hook so injecting other
     * plugins inside  the `config` hook will have no effect.
     */
    config?: ObjectHook<(this: void, config: UserConfig, env: ConfigEnv) => UserConfig | null | void | Promise<UserConfig | null | void>>;
    /**
     * Use this hook to read and store the final resolved vite config.
     */
    configResolved?: ObjectHook<(this: void, config: ResolvedConfig) => void | Promise<void>>;
    /**
     * Configure the vite server. The hook receives the {@link ViteDevServer}
     * instance. This can also be used to store a reference to the server
     * for use in other hooks.
     *
     * The hooks will be called before internal middlewares are applied. A hook
     * can return a post hook that will be called after internal middlewares
     * are applied. Hook can be async functions and will be called in series.
     */
    configureServer?: ObjectHook<ServerHook>;
    /**
     * Configure the preview server. The hook receives the {@link PreviewServerForHook}
     * instance. This can also be used to store a reference to the server
     * for use in other hooks.
     *
     * The hooks are called before other middlewares are applied. A hook can
     * return a post hook that will be called after other middlewares are
     * applied. Hooks can be async functions and will be called in series.
     */
    configurePreviewServer?: ObjectHook<PreviewServerHook>;
    /**
     * Transform index.html.
     * The hook receives the following arguments:
     *
     * - html: string
     * - ctx?: vite.ServerContext (only present during serve)
     * - bundle?: rollup.OutputBundle (only present during build)
     *
     * It can either return a transformed string, or a list of html tag
     * descriptors that will be injected into the `<head>` or `<body>`.
     *
     * By default the transform is applied **after** vite's internal html
     * transform. If you need to apply the transform before vite, use an object:
     * `{ order: 'pre', handler: hook }`
     */
    transformIndexHtml?: IndexHtmlTransform;
    /**
     * Perform custom handling of HMR updates.
     * The handler receives a context containing changed filename, timestamp, a
     * list of modules affected by the file change, and the dev server instance.
     *
     * - The hook can return a filtered list of modules to narrow down the update.
     *   e.g. for a Vue SFC, we can narrow down the part to update by comparing
     *   the descriptors.
     *
     * - The hook can also return an empty array and then perform custom updates
     *   by sending a custom hmr payload via server.ws.send().
     *
     * - If the hook doesn't return a value, the hmr update will be performed as
     *   normal.
     */
    handleHotUpdate?: ObjectHook<(this: void, ctx: HmrContext) => Array<ModuleNode> | void | Promise<Array<ModuleNode> | void>>;
    /**
     * extend hooks with ssr flag
     */
    resolveId?: ObjectHook<(this: PluginContext, source: string, importer: string | undefined, options: {
        assertions: Record<string, string>;
        custom?: CustomPluginOptions;
        ssr?: boolean;
        /* Excluded from this release type: scan */
        isEntry: boolean;
    }) => Promise<ResolveIdResult> | ResolveIdResult>;
    load?: ObjectHook<(this: PluginContext, id: string, options?: {
        ssr?: boolean;
    }) => Promise<LoadResult> | LoadResult>;
    transform?: ObjectHook<(this: TransformPluginContext, code: string, id: string, options?: {
        ssr?: boolean;
    }) => Promise<TransformResult_2> | TransformResult_2>;
}
export { Plugin_2 as Plugin }

export declare interface PluginContainer {
    options: InputOptions;
    getModuleInfo(id: string): ModuleInfo | null;
    buildStart(options: InputOptions): Promise<void>;
    resolveId(id: string, importer?: string, options?: {
        assertions?: Record<string, string>;
        custom?: CustomPluginOptions;
        skip?: Set<Plugin_2>;
        ssr?: boolean;
        /* Excluded from this release type: scan */
        isEntry?: boolean;
    }): Promise<PartialResolvedId | null>;
    transform(code: string, id: string, options?: {
        inMap?: SourceDescription['map'];
        ssr?: boolean;
    }): Promise<{
        code: string;
        map: SourceMap | null;
    }>;
    load(id: string, options?: {
        ssr?: boolean;
    }): Promise<LoadResult | null>;
    close(): Promise<void>;
}

export declare interface PluginHookUtils {
    getSortedPlugins: (hookName: keyof Plugin_2) => Plugin_2[];
    getSortedPluginHooks: <K extends keyof Plugin_2>(hookName: K) => NonNullable<HookHandler<Plugin_2[K]>>[];
}

export declare type PluginOption = Plugin_2 | false | null | undefined | PluginOption[] | Promise<Plugin_2 | false | null | undefined | PluginOption[]>;

/**
 * @experimental
 */
export declare function preprocessCSS(code: string, filename: string, config: ResolvedConfig): Promise<PreprocessCSSResult>;

export declare interface PreprocessCSSResult {
    code: string;
    map?: SourceMapInput;
    modules?: Record<string, string>;
    deps?: Set<string>;
}

/**
 * Starts the Vite server in preview mode, to simulate a production deployment
 */
export declare function preview(inlineConfig?: InlineConfig): Promise<PreviewServer>;

export declare interface PreviewOptions extends CommonServerOptions {
}

export declare interface PreviewServer extends PreviewServerForHook {
    resolvedUrls: ResolvedServerUrls;
}

export declare interface PreviewServerForHook {
    /**
     * The resolved vite config object
     */
    config: ResolvedConfig;
    /**
     * A connect app instance.
     * - Can be used to attach custom middlewares to the preview server.
     * - Can also be used as the handler function of a custom http server
     *   or as a middleware in any connect-style Node.js frameworks
     *
     * https://github.com/senchalabs/connect#use-middleware
     */
    middlewares: Connect.Server;
    /**
     * native Node http server instance
     */
    httpServer: http.Server;
    /**
     * The resolved urls Vite prints on the CLI
     */
    resolvedUrls: ResolvedServerUrls | null;
    /**
     * Print server urls
     */
    printUrls(): void;
}

export declare type PreviewServerHook = (this: void, server: PreviewServerForHook) => (() => void) | void | Promise<(() => void) | void>;

export declare interface ProxyOptions extends HttpProxy.ServerOptions {
    /**
     * rewrite path
     */
    rewrite?: (path: string) => string;
    /**
     * configure the proxy server (e.g. listen to events)
     */
    configure?: (proxy: HttpProxy.Server, options: ProxyOptions) => void;
    /**
     * webpack-dev-server style bypass function
     */
    bypass?: (req: ht<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Police Station Management system</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport" />
    <meta content="" name="keywords" />
    <meta content="" name="description" />

    <!-- Favicon -->
    <link href="img/favicon.ico" rel="icon" />

    <!-- Google Web Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Heebo:wght@400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <!-- Icon Font Stylesheet -->
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.10.0/css/all.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.4.1/font/bootstrap-icons.css"
      rel="stylesheet"
    />

    <!-- Libraries Stylesheet -->
    <link href="lib/owlcarousel/assets/owl.carousel.min.css" rel="stylesheet" />
    <link
      href="lib/tempusdominus/css/tempusdominus-bootstrap-4.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css"
    />

    <!-- Customized Bootstrap Stylesheet -->
    <link href="css/bootstrap.min.css" rel="stylesheet" />

    <!-- Template Stylesheet -->
    <link href="css/style.css" rel="stylesheet" />
  </head>
  <style>
    .rounded-lg {
      border-radius: 1rem;
    }

    .nav-pills .nav-link {
      color: #555;
    }

    .nav-pills .nav-link.active {
      color: #fff;
    }
  </style>
  <body>
    <div class="container-fluid position-relative bg-white d-flex p-0">
      <!-- Spinner Start -->
      <div
        id="spinner"
        class="show bg-white position-fixed translate-middle w-100 vh-100 top-50 start-50 d-flex align-items-center justify-content-center"
      >
        <div
          class="spinner-border text-primary"
          style="width: 3rem; height: 3rem"
          role="status"
        >
          <span class="sr-only">Loading...</span>
        </div>
      </div>
      <!-- Spinner End -->

      <!-- Sidebar Start -->
      <div class="sidebar pe-4 pb-3">
        <nav class="navbar bg-light navbar-light">
          <a href="index.html" class="navbar-brand mx-4 mb-3">
            <h3 class="text-primary">DASHBOARD</h3>
          </a>
          <div class="d-flex align-items-center ms-4 mb-4">
            <div class="position-relative">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                height="2.5em"
                viewBox="0 0 448 512"
                class="user"
              >
                <path
                  d="M224 256A128 128 0 1 1 224 0a128 128 0 1 1 0 256zM209.1 359.2l-18.6-31c-6.4-10.7 1.3-24.2 13.7-24.2H224h19.7c12.4 0 20.1 13.6 13.7 24.2l-18.6 31 33.4 123.9 36-146.9c2-8.1 9.8-13.4 17.9-11.3c70.1 17.6 121.9 81 121.9 156.4c0 17-13.8 30.7-30.7 30.7H285.5c-2.1 0-4-.4-5.8-1.1l.3 1.1H168l.3-1.1c-1.8 .7-3.8 1.1-5.8 1.1H30.7C13.8 512 0 498.2 0 481.3c0-75.5 51.9-138.9 121.9-156.4c8.1-2 15.9 3.3 17.9 11.3l36 146.9 33.4-123.9z"
                />
              </svg>
              <!-- <div
                class="bg-success rounded-circle border border-2 border-white position-absolute end-0 bottom-0 p-1"
              ></div> -->
            </div>
            <div class="ms-3">
              <h6 class="mb-0">User</h6>
              <span>Admin</span>
            </div>
          </div>
          <div class="navbar-nav w-100">
            <a href="index.html" class="nav-item nav-link active"
              ><i class="fa fa-tachometer-alt me-2"></i>Dashboard</a
            >
            <div class="nav-item dropdown">
              <a
                href="#"
                class="nav-link dropdown-toggle"
                data-bs-toggle="dropdown"
                ><i class="fa fa-laptop me-2"></i>Elements</a
              >
              <div class="dropdown-menu bg-transparent border-0">
                <a href="button.html" class="dropdown-item">Buttons</a>
                <a href="typography.html" class="dropdown-item">Typography</a>
                <a href="element.html" class="dropdown-item">Other Elements</a>
              </div>
            </div>
            <a href="widget.html" class="nav-item nav-link"
              ><i class="fa fa-th me-2"></i>Widgets</a
            >
            <a href="form.html" class="nav-item nav-link"
              ><i class="fa fa-keyboard me-2"></i>Forms</a
            >
            <a href="table.html" class="nav-item nav-link"
              ><i class="fa fa-table me-2"></i>Tables</a
            >
            <a href="chart.html" class="nav-item nav-link"
              ><i class="fa fa-chart-bar me-2"></i>Charts</a
            >
            <div class="nav-item dropdown">
              <a
                href="#"
                class="nav-link dropdown-toggle"
                data-bs-toggle="dropdown"
                ><i class="far fa-file-alt me-2"></i>Pages</a
              >
              <div class="dropdown-menu bg-transparent border-0">
                <a href="signin.html" class="dropdown-item">Sign In</a>
                <a href="signup.html" class="dropdown-item">Sign Up</a>
                <a href="404.html" class="dropdown-item">404 Error</a>
                <a href="blank.html" class="dropdown-item">Blank Page</a>
              </div>
            </div>
          </div>
        </nav>
      </div>
      <!-- Sidebar End -->

      <!-- Content Start -->
      <div class="content">
        <!-- Navbar Start -->
        <nav
          class="navbar navbar-expand bg-light navbar-light sticky-top px-4 py-0"
        >
          <a href="index.html" class="navbar-brand d-flex d-lg-none me-4">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              height="2em"
              viewBox="0 0 448 512"
            >
              <path
                d="M224 256A128 128 0 1 1 224 0a128 128 0 1 1 0 256zM209.1 359.2l-18.6-31c-6.4-10.7 1.3-24.2 13.7-24.2H224h19.7c12.4 0 20.1 13.6 13.7 24.2l-18.6 31 33.4 123.9 36-146.9c2-8.1 9.8-13.4 17.9-11.3c70.1 17.6 121.9 81 121.9 156.4c0 17-13.8 30.7-30.7 30.7H285.5c-2.1 0-4-.4-5.8-1.1l.3 1.1H168l.3-1.1c-1.8 .7-3.8 1.1-5.8 1.1H30.7C13.8 512 0 498.2 0 481.3c0-75.5 51.9-138.9 121.9-156.4c8.1-2 15.9 3.3 17.9 11.3l36 146.9 33.4-123.9z"
              />
            </svg>
          </a>
          <a href="#" class="sidebar-toggler flex-shrink-0 text-dark">
            <i class="fa fa-bars"></i>
          </a>
          <form class="d-none d-md-flex ms-4">
            <input
              class="form-control border-0"
              type="search"
              placeholder="Search"
            />
          </form>
          <div class="navbar-nav align-items-center ms-auto">
            <div class="nav-item dropdown">
              <a
                href="#"
                class="nav-link dropdown-toggle"
                data-bs-toggle="dropdown"
              >
                <i class="fa fa-envelope me-lg-2"></i>
                <span class="d-none d-lg-inline-flex">Messages</span>
              </a>
              <div
                class="dropdown-menu dropdown-menu-end bg-light border-0 rounded-0 rounded-bottom m-0"
              >
                <a href="#" class="dropdown-item">
                  <div class="d-flex align-items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      height="2em"
                      viewBox="0 0 448 512"
                    >
                      <path
                        d="M224 256A128 128 0 1 1 224 0a128 128 0 1 1 0 256zM209.1 359.2l-18.6-31c-6.4-10.7 1.3-24.2 13.7-24.2H224h19.7c12.4 0 20.1 13.6 13.7 24.2l-18.6 31 33.4 123.9 36-146.9c2-8.1 9.8-13.4 17.9-11.3c70.1 17.6 121.9 81 121.9 156.4c0 17-13.8 30.7-30.7 30.7H285.5c-2.1 0-4-.4-5.8-1.1l.3 1.1H168l.3-1.1c-1.8 .7-3.8 1.1-5.8 1.1H30.7C13.8 512 0 498.2 0 481.3c0-75.5 51.9-138.9 121.9-156.4c8.1-2 15.9 3.3 17.9 11.3l36 146.9 33.4-123.9z"
                      />
                    </svg>
                    <div class="ms-2">
                      <h6 class="fw-normal mb-0">User_1 send you a message</h6>
                      <small>15 minutes ago</small>
                    </div>
                  </div>
                </a>
                <hr class="dropdown-divider" />
                <a href="#" class="dropdown-item">
                  <div class="d-flex align-items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      height="2em"
                      viewBox="0 0 448 512"
                    >
                      <path
                        d="M224 256A128 128 0 1 1 224 0a128 128 0 1 1 0 256zM209.1 359.2l-18.6-31c-6.4-10.7 1.3-24.2 13.7-24.2H224h19.7c12.4 0 20.1 13.6 13.7 24.2l-18.6 31 33.4 123.9 36-146.9c2-8.1 9.8-13.4 17.9-11.3c70.1 17.6 121.9 81 121.9 156.4c0 17-13.8 30.7-30.7 30.7H285.5c-2.1 0-4-.4-5.8-1.1l.3 1.1H168l.3-1.1c-1.8 .7-3.8 1.1-5.8 1.1H30.7C13.8 512 0 498.2 0 481.3c0-75.5 51.9-138.9 121.9-156.4c8.1-2 15.9 3.3 17.9 11.3l36 146.9 33.4-123.9z"
                      />
                    </svg>
                    <div class="ms-2">
                      <h6 class="fw-normal mb-0">User_2 send you a message</h6>
                      <small>35 minutes ago</small>
                    </div>
                  </div>
                </a>
                <hr class="dropdown-divider" />
                <a href="#" class="dropdown-item">
                  <div class="d-flex align-items-center">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      height="2em"
                      viewBox="0 0 448 512"
                    >
                      <path
                        d="M224 256A128 128 0 1 1 224 0a128 128 0 1 1 0 256zM209.1 359.2l-18.6-31c-6.4-10.7 1.3-24.2 13.7-24.2H224h19.7c12.4 0 20.1 13.6 13.7 24.2l-18.6 31 33.4 123.9 36-146.9c2-8.1 9.8-13.4 17.9-11.3c70.1 17.6 121.9 81 121.9 156.4c0 17-13.8 30.7-30.7 30.7H285.5c-2.1 0-4-.4-5.8-1.1l.3 1.1H168l.3-1.1c-1.8 .7-3.8 1.1-5.8 1.1H30.7C13.8 512 0 498.2 0 481.3c0-75.5 51.9-138.9 121.9-156.4c8.1-2 15.9 3.3 17.9 11.3l36 146.9 33.4-123.9z"
                      />
                    </svg>
                    <div class="ms-2">
                      <h6 class="fw-normal mb-0">User_3 send you a message</h6>
                      <small>2 hours ago</small>
                    </div>
                  </div>
                </a>
                <hr class="dropdown-divider" />
                <a href="#" class="dropdown-item text-center"
                  >See all message</a
                >
              </div>
            </div>
            <div class="nav-item dropdown">
              <a
                href="#"
                class="nav-link dropdown-toggle"
                data-bs-toggle="dropdown"
              >
                <i class="fa fa-bell me-lg-2"></i>
                <span class="d-none d-lg-inline-flex">Notifications</span>
              </a>
              <div
                class="dropdown-menu dropdown-menu-end bg-light border-0 rounded-0 rounded-bottom m-0"
              >
                <a href="#" class="dropdown-item">
                  <h6 class="fw-normal mb-0">Profile updated</h6>
                  <small>15 minutes ago</small>
                </a>
                <hr class="dropdown-divider" />
                <a href="#" class="dropdown-item">
                  <h6 class="fw-normal mb-0">New user added</h6>
                  <small>15 minutes ago</small>
                </a>
                <hr class="dropdown-divider" />
                <a href="#" class="dropdown-item">
                  <h6 class="fw-normal mb-0">Password changed</h6>
                  <small>15 minutes ago</small>
                </a>
                <hr class="dropdown-divider" />
                <a href="#" class="dropdown-item text-center"
                  >See all notifications</a
                >
              </div>
            </div>
            <div class="nav-item dropdown">
              <a
                href="#"
                class="nav-link dropdown-toggle"
                data-bs-toggle="dropdown"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  height="2em"
                  viewBox="0 0 448 512"
                  class="user"
                >
                  <path
                    d="M224 256A128 128 0 1 1 224 0a128 128 0 1 1 0 256zM209.1 359.2l-18.6-31c-6.4-10.7 1.3-24.2 13.7-24.2H224h19.7c12.4 0 20.1 13.6 13.7 24.2l-18.6 31 33.4 123.9 36-146.9c2-8.1 9.8-13.4 17.9-11.3c70.1 17.6 121.9 81 121.9 156.4c0 17-13.8 30.7-30.7 30.7H285.5c-2.1 0-4-.4-5.8-1.1l.3 1.1H168l.3-1.1c-1.8 .7-3.8 1.1-5.8 1.1H30.7C13.8 512 0 498.2 0 481.3c0-75.5 51.9-138.9 121.9-156.4c8.1-2 15.9 3.3 17.9 11.3l36 146.9 33.4-123.9z"
                  />
                </svg>
                <span class="d-none d-lg-inline-flex">User</span>
              </a>
              <div
                class="dropdown-menu dropdown-menu-end bg-light border-0 rounded-0 rounded-bottom m-0"
              >
                <a href="#" class="dropdown-item">My Profile</a>
                <a href="#" class="dropdown-item">Settings</a>
                <a href="#" class="dropdown-item">Log Out</a>
              </div>
            </div>
          </div>
        </nav>
        <!-- Navbar End -->

        <!-- Sale & Revenue Start -->
        <div class="container-fluid pt-4 px-4">
          <div class="row g-4">
            <div class="col-sm-12 col-xl-12">
              <div class="bg-light rounded p-4">
                <div class="ms-3">
                  <h1 class="text-center">Evidences</h1>
                </div>
              </div>
            </div>
          </div>
        </div>
        <!-- Sale & Revenue End -->

        <!-- evidence form -->
        <div class="container py-5">
          <!-- For demo purpose -->
          <div class="row mb-4">
            <div class="col-lg-8 mx-auto text-center">
              <h1 class="display-4">Evidence form</h1>
            </div>
          </div>
          <!-- End -->

          <div class="row">
            <div class="col-lg-7 mx-auto">
              <div class="bg-white rounded-lg shadow-sm p-5">
                <!-- Credit card form tabs -->
                <ul
                  role="tablist"
                  class="nav bg-light nav-pills rounded-pill nav-fill mb-3"
                >
                  <li class="nav-item">
                    <a
                      data-toggle="pill"
                      href="#nav-tab-card"
                      class="nav-link active rounded-pill"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        height="1em"
                        viewBox="0 0 640 512"
                        class="pe-1"
                      >
                        <path
                          d="M240 32a32 32 0 1 1 64 0 32 32 0 1 1 -64 0zM192 48a32 32 0 1 1 0 64 32 32 0 1 1 0-64zm-32 80c17.7 0 32 14.3 32 32h8c13.3 0 24 10.7 24 24v16c0 1.7-.2 3.4-.5 5.1C280.3 229.6 320 286.2 320 352c0 88.4-71.6 160-160 160S0 440.4 0 352c0-65.8 39.7-122.4 96.5-146.9c-.4-1.6-.5-3.3-.5-5.1V184c0-13.3 10.7-24 24-24h8c0-17.7 14.3-32 32-32zm0 320a96 96 0 1 0 0-192 96 96 0 1 0 0 192zm192-96c0-25.9-5.1-50.5-14.4-73.1c16.9-32.9 44.8-59.1 78.9-73.9c-.4-1.6-.5-3.3-.5-5.1V184c0-13.3 10.7-24 24-24h8c0-17.7 14.3-32 32-32s32 14.3 32 32h8c13.3 0 24 10.7 24 24v16c0 1.7-.2 3.4-.5 5.1C600.3 229.6 640 286.2 640 352c0 88.4-71.6 160-160 160c-62 0-115.8-35.3-142.4-86.9c9.3-22.5 14.4-47.2 14.4-73.1zm224 0a96 96 0 1 0 -192 0 96 96 0 1 0 192 0zM368 0a32 32 0 1 1 0 64 32 32 0 1 1 0-64zm80 48a32 32 0 1 1 0 64 32 32 0 1 1 0-64z"
                        />
                      </svg>
                      Criminal Information
                    </a>
                  </li>
                  <li class="nav-item">
                    <a
                      data-toggle="pill"
                      href="#nav-tab-paypal"
                      class="nav-link rounded-pill"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        height="1em"
                        viewBox="0 0 448 512"
                        class="pe-1"
                      >
                        <path
                          d="M364.2 83.8c-24.4-24.4-64-24.4-88.4 0l-184 184c-42.1 42.1-42.1 110.3 0 152.4s110.3 42.1 152.4 0l152-152c10.9-10.9 28.7-10.9 39.6 0s10.9 28.7 0 39.6l-152 152c-64 64-167.6 64-231.6 0s-64-167.6 0-231.6l184-184c46.3-46.3 121.3-46.3 167.6 0s46.3 121.3 0 167.6l-176 176c-28.6 28.6-75 28.6-103.6 0s-28.6-75 0-103.6l144-144c10.9-10.9 28.7-10.9 39.6 0s10.9 28.7 0 39.6l-144 144c-6.7 6.7-6.7 17.7 0 24.4s17.7 6.7 24.4 0l176-176c24.4-24.4 24.4-64 0-88.4z"
                        />
                      </svg>
                      Case Details
                    </a>
                  </li>
                  <li class="nav-item">
                    <a
                      data-toggle="pill"
                      href="#nav-tab-bank"
                      class="nav-link rounded-pill"
                    >
                      <i class="fa fa-university"></i>
                      Bank Transfer
                    </a>
                  </li>
                </ul>
                <!-- End -->

                <!-- Credit card form content -->
                <div class="tab-content">
                  <!-- credit card info-->
                  <div id="nav-tab-card" class="tab-pane fade show active">
                    <p class="alert alert-secondary">
                      Some text success or error
                    </p>
                    <form role="form">
                      <div class="form-group">
                        <label for="username">First Name</label>
                        <input
                          type="text"
                          name="username"
                          placeholder="Enter Name . . ."
                          required
                          class="form-control"
                        />
                      </div>
                      <div class="form-group">
                        <label for="cardNumber">Last Name</label>
                        <div class="input-group">
                          <input
                            type="text"
                            name="cardNumber"
                            placeholder="Enter Name . . ."
                            class="form-control"
                            required
                          />
                        </div>
                      </div>
                      <div class="row">
                        <div class="col-sm-8 col-xl-12">
                          <div class="form-group">
                            <label
                              ><span class="hidden-xs"
                                >Date of Birth</span
                              ></label
                            >
                            <div class="input-group">
                              <input
                                type="number"
                                placeholder="DD"
                                name=""
                                class="form-control"
                                required
                              />
                              <input
                                type="number"
                                placeholder="MM"
                                name=""
                                class="form-control"
                                required
                              />
                              <input
                                type="number"
                                placeholder="YY"
                                name=""
                                class="form-control"
                                required
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                      <button
                        type="button"
                        class="subscribe btn btn-primary btn-block rounded-pill shadow-sm"
                      >
                        Confirm
                      </button>
                    </form>
                  </div>
                  <!-- End -->

                  <!-- Paypal info -->
                  <div id="nav-tab-card" class="tab-pane fade show active">
                    <p class="alert alert-secondary">
                      Some text success or error
                    </p>
                    <form role="form">
                      <div class="form-group">
                        <label for="username">First Name</label>
                        <input
                          type="text"
                          name="username"
                          placeholder="Enter Name . . ."
                          required
                          class="form-control"
                        />
                      </div>
                      <div class="form-group">
                        <label for="cardNumber">Last Name</label>
                        <div class="input-group">
                          <input
                            type="text"
                            name="cardNumber"
                            placeholder="Enter Name . . ."
                            class="form-control"
                            required
                          />
                        </div>
                      </div>
                      <div class="row">
                        <div class="col-sm-8 col-xl-12">
                          <div class="form-group">
                            <label
                              ><span class="hidden-xs"
                                >Date of Birth</span
                              ></label
                            >
                            <div class="input-group">
                              <input
                                type="number"
                                placeholder="DD"
                                name=""
                                class="form-control"
                                required
                              />
                              <input
                                type="number"
                                placeholder="MM"
                                name=""
                                class="form-control"
                                required
                              />
                              <input
                                type="number"
                                placeholder="YY"
                                name=""
                                class="form-control"
                                required
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                      <button
                        type="button"
                        class="subscribe btn btn-primary btn-block rounded-pill shadow-sm"
                      >
                        Confirm
                      </button>
                    </form>
                  </div>
                  <!-- End -->

                  <!-- bank transfer info -->
                  <div id="nav-tab-bank" class="tab-pane fade">
                    <h6>Bank account details</h6>
                    <dl>
                      <dt>Bank</dt>
                      <dd>THE WORLD BANK</dd>
                    </dl>
                    <dl>
                      <dt>Account number</dt>
                      <dd>7775877975</dd>
                    </dl>
                    <dl>
                      <dt>IBAN</dt>
                      <dd>CZ7775877975656</dd>
                    </dl>
                    <p class="text-muted">
                      Lorem ipsum dolor sit amet, consectetur adipisicing elit,
                      sed do eiusmod tempor incididunt ut labore et dolore magna
                      aliqua.
                    </p>
                  </div>
                  <!-- End -->
                </div>
                <!-- End -->
              </div>
            </div>
          </div>
        </div>

        <!-- evidence form end -->

        <!-- Officers Start-->
        <div class="row row-cols-1 row-cols-md-3 g-4 p-4">
          <div class="col">
            <div class="card h-100">
              <img src="img/wilson.jpg" class="card-img-top" alt="..." />
              <div class="card-body">
                <h5 class="card-title">K. Wilson</h5>
                <p class="card-text text-secondary">Police Cheif</p>
              </div>
            </div>
          </div>
          <div class="col">
            <div class="card h-100">
              <img
                src="img/Jerry Shingles.jpg"
                class="card-img-top"
                alt="..."
                height="290px"
              />
              <div class="card-body">
                <h5 class="card-title">Jerry Shingles</h5>
                <p class="card-text text-secondary">Officer</p>
              </div>
            </div>
          </div>
          <div class="col">
            <div class="card h-100">
              <img
                src="img/patrick denis.jpg"
                class="card-img-top"
                alt="..."
                height="290px"
              />
              <div class="card-body">
                <h5 class="card-title">Patrick Denis</h5>
                <p class="card-text">Assistant Director</p>
              </div>
            </div>
          </div>
          <div class="col">
            <div class="card h-100">
              <img src="img/Haley Walker.jpg" class="card-img-top" alt="..." />
              <div class="card-body">
                <h5 class="card-title">Haley Walker</h5>
                <p class="card-text text-secondary">Rifle Police Officer</p>
              </div>
            </div>
          </div>
          <div class="col">
            <div class="card h-100">
              <img
                src="img/Jhon Strong.jpg"
                class="card-img-top"
                alt="..."
                height="260px"
              />
              <div class="card-body">
                <h5 class="card-title">Jhon Strong</h5>
                <p class="card-text text-secondary">Arms Specialist</p>
              </div>
            </div>
          </div>
          <div class="col">
            <div class="card h-100">
              <img
                src="img/Victor Stalner.jpg"
                class="card-img-top"
                alt="..."
              />
              <div class="card-body">
                <h5 class="card-title">Victor Stalner</h5>
                <p class="card-text text-secondary">Officer</p>
              </div>
            </div>
          </div>
        </div>
        <div class="text-center">
          <button type="button" class="btn bg-primary text-white m-2 px-5">
            Load More
          </button>
        </div>
        <!-- Officers End -->

        <!-- Footer Start -->
        <div class="container-fluid pt-4 px-4">
          <div class="bg-light rounded-top p-4">
            <div class="row">
              <div
                class="d-flex justify-content-center align-items-center col-12 text-center"
              >
                <h3 style="color: #305c75">Bangladesh</h3>
                <img
                  class="text-center px-4"
                  src="img/BD-police-svg.svg"
                  alt=""
                />
                <h3 style="color: #305c75">Police</h3>
              </div>
            </div>
          </div>
        </div>
        <!-- Footer End -->
      </div>
      <!-- Content End -->

      <!-- Back to Top -->
      <a href="#" class="btn btn-lg btn-primary btn-lg-square back-to-top"
        ><i class="bi bi-arrow-up"></i
      ></a>
    </div>

    <!-- JavaScript Libraries -->
    <script>
      $(function () {
        $('[data-toggle="tooltip"]').tooltip();
      });
    </script>
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="lib/chart/chart.min.js"></script>
    <script src="lib/easing/easing.min.js"></script>
    <script src="lib/waypoints/waypoints.min.js"></script>
    <script src="lib/owlcarousel/owl.carousel.min.js"></script>
    <script src="lib/tempusdominus/js/moment.min.js"></script>
    <script src="lib/tempusdominus/js/moment-timezone.min.js"></script>
    <script src="lib/tempusdominus/js/tempusdominus-bootstrap-4.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-steps/1.1.0/jquery.steps.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>

    <!-- Template Javascript -->
    <script src="js/main.js"></script>
  </body>
</html>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     absolute path, or a path relative from
     * root.
     * @default root
     */
    envDir?: string;
    /**
     * Env variables starts with `envPrefix` will be exposed to your client source code via import.meta.env.
     * @default 'VITE_'
     */
    envPrefix?: string | string[];
    /**
     * Worker bundle options
     */
    worker?: {
        /**
         * Output format for worker bundle
         * @default 'iife'
         */
        format?: 'es' | 'iife';
        /**
         * Vite plugins that apply to worker bundle
         */
        plugins?: PluginOption[];
        /**
         * Rollup options to build worker bundle
         */
        rollupOptions?: Omit<RollupOptions, 'plugins' | 'input' | 'onwarn' | 'preserveEntrySignatures'>;
    };
    /**
     * Whether your application is a Single Page Application (SPA),
     * a Multi-Page Application (MPA), or Custom Application (SSR
     * and frameworks with custom HTML handling)
     * @default 'spa'
     */
    appType?: AppType;
}

export declare type UserConfigExport = UserConfig | Promise<UserConfig> | UserConfigFnObject | UserConfigFnPromise | UserConfigFn;

export declare type UserConfigFn = (env: ConfigEnv) => UserConfig | Promise<UserConfig>;

export declare type UserConfigFnObject = (env: ConfigEnv) => UserConfig;

export declare type UserConfigFnPromise = (env: ConfigEnv) => Promise<UserConfig>;

export declare const version: string;

export declare interface ViteDevServer {
    /**
     * The resolved vite config object
     */
    config: ResolvedConfig;
    /**
     * A connect app instance.
     * - Can be used to attach custom middlewares to the dev server.
     * - Can also be used as the handler function of a custom http server
     *   or as a middleware in any connect-style Node.js frameworks
     *
     * https://github.com/senchalabs/connect#use-middleware
     */
    middlewares: Connect.Server;
    /**
     * native Node http server instance
     * will be null in middleware mode
     */
    httpServer: http.Server | null;
    /**
     * chokidar watcher instance
     * https://github.com/paulmillr/chokidar#api
     */
    watcher: FSWatcher;
    /**
     * web socket server with `send(payload)` method
     */
    ws: WebSocketServer;
    /**
     * Rollup plugin container that can run plugin hooks on a given file
     */
    pluginContainer: PluginContainer;
    /**
     * Module graph that tracks the import relationships, url to file mapping
     * and hmr state.
     */
    moduleGraph: ModuleGraph;
    /**
     * The resolved urls Vite prints on the CLI. null in middleware mode or
     * before `server.listen` is called.
     */
    resolvedUrls: ResolvedServerUrls | null;
    /**
     * Programmatically resolve, load and transform a URL and get the result
     * without going through the http request pipeline.
     */
    transformRequest(url: string, options?: TransformOptions): Promise<TransformResult | null>;
    /**
     * Apply vite built-in HTML transforms and any plugin HTML transforms.
     */
    transformIndexHtml(url: string, html: string, originalUrl?: string): Promise<string>;
    /**
     * Transform module code into SSR format.
     */
    ssrTransform(code: string, inMap: SourceMap | null, url: string, originalCode?: string): Promise<TransformResult | null>;
    /**
     * Load a given URL as an instantiated module for SSR.
     */
    ssrLoadModule(url: string, opts?: {
        fixStacktrace?: boolean;
    }): Promise<Record<string, any>>;
    /**
     * Returns a fixed version of the given stack
     */
    ssrRewriteStacktrace(stack: string): string;
    /**
     * Mutates the given SSR error by rewriting the stacktrace
     */
    ssrFixStacktrace(e: Error): void;
    /**
     * Triggers HMR for a module in the module graph. You can use the `server.moduleGraph`
     * API to retrieve the module to be reloaded. If `hmr` is false, this is a no-op.
     */
    reloadModule(module: ModuleNode): Promise<void>;
    /**
     * Start the server.
     */
    listen(port?: number, isRestart?: boolean): Promise<ViteDevServer>;
    /**
     * Stop the server.
     */
    close(): Promise<void>;
    /**
     * Print server urls
     */
    printUrls(): void;
    /**
     * Restart the server.
     *
     * @param forceOptimize - force the optimizer to re-bundle, same as --force cli flag
     */
    restart(forceOptimize?: boolean): Promise<void>;
    /**
     * Open browser
     */
    openBrowser(): void;
    /* Excluded from this release type: _importGlobMap */
    /* Excluded from this release type: _ssrExternals */
    /* Excluded from this release type: _restartPromise */
    /* Excluded from this release type: _forceOptimizeOnRestart */
    /* Excluded from this release type: _pendingRequests */
    /* Excluded from this release type: _fsDenyGlob */
    /* Excluded from this release type: _shortcutsOptions */
}

export declare interface WatchOptions {
    /**
     * Indicates whether the process should continue to run as long as files are being watched. If
     * set to `false` when using `fsevents` to watch, no more events will be emitted after `ready`,
     * even if the process continues to run.
     */
    persistent?: boolean

    /**
     * ([anymatch](https://github.com/micromatch/anymatch)-compatible definition) Defines files/paths to
     * be ignored. The whole relative or absolute path is tested, not just filename. If a function
     * with two arguments is provided, it gets called twice per path - once with a single argument
     * (the path), second time with two arguments (the path and the
     * [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) object of that path).
     */
    ignored?: Matcher

    /**
     * If set to `false` then `add`/`addDir` events are also emitted for matching paths while
     * instantiating the watching as chokidar discovers these file paths (before the `ready` event).
     */
    ignoreInitial?: boolean

    /**
     * When `false`, only the symlinks themselves will be watched for changes instead of following
     * the link references and bubbling events through the link's path.
     */
    followSymlinks?: boolean

    /**
     * The base directory from which watch `paths` are to be derived. Paths emitted with events will
     * be relative to this.
     */
    cwd?: string

    /**
     * If set to true then the strings passed to .watch() and .add() are treated as literal path
     * names, even if they look like globs.
     *
     * @default false
     */
    disableGlobbing?: boolean

    /**
     * Whether to use fs.watchFile (backed by polling), or fs.watch. If polling leads to high CPU
     * utilization, consider setting this to `false`. It is typically necessary to **set this to
     * `true` to successfully watch files over a network**, and it may be necessary to successfully
     * watch files in other non-standard situations. Setting to `true` explicitly on OS X overrides
     * the `useFsEvents` default.
     */
    usePolling?: boolean

    /**
     * Whether to use the `fsevents` watching interface if available. When set to `true` explicitly
     * and `fsevents` is available this supersedes the `usePolling` setting. When set to `false` on
     * OS X, `usePolling: true` becomes the default.
     */
    useFsEvents?: boolean

    /**
     * If relying upon the [`fs.Stats`](https://nodejs.org/api/fs.html#fs_class_fs_stats) object that
     * may get passed with `add`, `addDir`, and `change` events, set this to `true` to ensure it is
     * provided even in cases where it wasn't already available from the underlying watch events.
     */
    alwaysStat?: boolean

    /**
     * If set, limits how many levels of subdirectories will be traversed.
     */
    depth?: number

    /**
     * Interval of file system polling.
     */
    interval?: number

    /**
     * Interval of file system polling for binary files. ([see list of binary extensions](https://gi
     * thub.com/sindresorhus/binary-extensions/blob/master/binary-extensions.json))
     */
    binaryInterval?: number

    /**
     *  Indicates whether to watch files that don't have read permissions if possible. If watching
     *  fails due to `EPERM` or `EACCES` with this set to `true`, the errors will be suppressed
     *  silently.
     */
    ignorePermissionErrors?: boolean

    /**
     * `true` if `useFsEvents` and `usePolling` are `false`. Automatically filters out artifacts
     * that occur when using editors that use "atomic writes" instead of writing directly to the
     * source file. If a file is re-added within 100 ms of being deleted, Chokidar emits a `change`
     * event rather than `unlink` then `add`. If the default of 100 ms does not work well for you,
     * you can override it by setting `atomic` to a custom value, in milliseconds.
     */
    atomic?: boolean | number

    /**
     * can be set to an object in order to adjust timing params:
     */
    awaitWriteFinish?: AwaitWriteFinishOptions | boolean
}

declare class WebSocket_2 extends EventEmitter {
    /** The connection is not yet open. */
    static readonly CONNECTING: 0
    /** The connection is open and ready to communicate. */
    static readonly OPEN: 1
    /** The connection is in the process of closing. */
    static readonly CLOSING: 2
    /** The connection is closed. */
    static readonly CLOSED: 3

    binaryType: 'nodebuffer' | 'arraybuffer' | 'fragments'
    readonly bufferedAmount: number
    readonly extensions: string
    /** Indicates whether the websocket is paused */
    readonly isPaused: boolean
    readonly protocol: string
    /** The current state of the connection */
    readonly readyState:
    | typeof WebSocket_2.CONNECTING
    | typeof WebSocket_2.OPEN
    | typeof WebSocket_2.CLOSING
    | typeof WebSocket_2.CLOSED
    readonly url: string

    /** The connection is not yet open. */
    readonly CONNECTING: 0
    /** The connection is open and ready to communicate. */
    readonly OPEN: 1
    /** The connection is in the process of closing. */
    readonly CLOSING: 2
    /** The connection is closed. */
    readonly CLOSED: 3

    onopen: ((event: WebSocket_2.Event) => void) | null
    onerror: ((event: WebSocket_2.ErrorEvent) => void) | null
    onclose: ((event: WebSocket_2.CloseEvent) => void) | null
    onmessage: ((event: WebSocket_2.MessageEvent) => void) | null

    constructor(address: null)
    constructor(
    address: string | URL_2,
    options?: WebSocket_2.ClientOptions | ClientRequestArgs,
    )
    constructor(
    address: string | URL_2,
    protocols?: string | string[],
    options?: WebSocket_2.ClientOptions | ClientRequestArgs,
    )

    close(code?: number, data?: string | Buffer): void
    ping(data?: any, mask?: boolean, cb?: (err: Error) => void): void
    pong(data?: any, mask?: boolean, cb?: (err: Error) => void): void
    send(data: any, cb?: (err?: Error) => void): void
    send(
    data: any,
    options: {
        mask?: boolean | undefined
        binary?: boolean | undefined
        compress?: boolean | undefined
        fin?: boolean | undefined
    },
    cb?: (err?: Error) => void,
    ): void
    terminate(): void

    /**
     * Pause the websocket causing it to stop emitting events. Some events can still be
     * emitted after this is called, until all buffered data is consumed. This method
     * is a noop if the ready state is `CONNECTING` or `CLOSED`.
     */
    pause(): void
    /**
     * Make a paused socket resume emitting events. This method is a noop if the ready
     * state is `CONNECTING` or `CLOSED`.
     */
    resume(): void

    // HTML5 WebSocket events
    addEventListener(
    method: 'message',
    cb: (event: WebSocket_2.MessageEvent) => void,
    options?: WebSocket_2.EventListenerOptions,
    ): void
    addEventListener(
    method: 'close',
    cb: (event: WebSocket_2.CloseEvent) => void,
    options?: WebSocket_2.EventListenerOptions,
    ): void
    addEventListener(
    method: 'error',
    cb: (event: WebSocket_2.ErrorEvent) => void,
    options?: WebSocket_2.EventListenerOptions,
    ): void
    addEventListener(
    method: 'open',
    cb: (event: WebSocket_2.Event) => void,
    options?: WebSocket_2.EventListenerOptions,
    ): void

    removeEventListener(
    method: 'message',
    cb: (event: WebSocket_2.MessageEvent) => void,
    ): void
    removeEventListener(
    method: 'close',
    cb: (event: WebSocket_2.CloseEvent) => void,
    ): void
    removeEventListener(
    method: 'error',
    cb: (event: WebSocket_2.ErrorEvent) => void,
    ): void
    removeEventListener(
    method: 'open',
    cb: (event: WebSocket_2.Event) => void,
    ): void

    // Events
    on(
    event: 'close',
    listener: (this: WebSocket_2, code: number, reason: Buffer) => void,
    ): this
    on(event: 'error', listener: (this: WebSocket_2, err: Error) => void): this
    on(
    event: 'upgrade',
    listener: (this: WebSocket_2, request: IncomingMessage) => void,
    ): this
    on(
    event: 'message',
    listener: (
    this: WebSocket_2,
    data: WebSocket_2.RawData,
    isBinary: boolean,
    ) => void,
    ): this
    on(event: 'open', listener: (this: WebSocket_2) => void): this
    on(
    event: 'ping' | 'pong',
    listener: (this: WebSocket_2, data: Buffer) => void,
    ): this
    on(
    event: 'unexpected-response',
    listener: (
    this: WebSocket_2,
    request: ClientRequest,
    response: IncomingMessage,
    ) => void,
    ): this
    on(
    event: string | symbol,
    listener: (this: WebSocket_2, ...args: any[]) => void,
    ): this

    once(
    event: 'close',
    listener: (this: WebSocket_2, code: number, reason: Buffer) => void,
    ): this
    once(event: 'error', listener: (this: WebSocket_2, err: Error) => void): this
    once(
    event: 'upgrade',
    listener: (this: WebSocket_2, request: IncomingMessage) => void,
    ): this
    once(
    event: 'message',
    listener: (
    this: WebSocket_2,
    data: WebSocket_2.RawData,
    isBinary: boolean,
    ) => void,
    ): this
    once(event: 'open', listener: (this: WebSocket_2) => void): this
    once(
    event: 'ping' | 'pong',
    listener: (this: WebSocket_2, data: Buffer) => void,
    ): this
    once(
    event: 'unexpected-response',
    listener: (
    this: WebSocket_2,
    request: ClientRequest,
    response: IncomingMessage,
    ) => void,
    ): this
    once(
    event: string | symbol,
    listener: (this: WebSocket_2, ...args: any[]) => void,
    ): this

    off(
    event: 'close',
    listener: (this: WebSocket_2, code: number, reason: Buffer) => void,
    ): this
    off(event: 'error', listener: (this: WebSocket_2, err: Error) => void): this
    off(
    event: 'upgrade',
    listener: (this: WebSocket_2, request: IncomingMessage) => void,
    ): this
    off(
    event: 'message',
    listener: (
    this: WebSocket_2,
    data: WebSocket_2.RawData,
    isBinary: boolean,
    ) => void,
    ): this
    off(event: 'open', listener: (this: WebSocket_2) => void): this
    off(
    event: 'ping' | 'pong',
    listener: (this: WebSocket_2, data: Buffer) => void,
    ): this
    off(
    event: 'unexpected-response',
    listener: (
    this: WebSocket_2,
    request: ClientRequest,
    response: IncomingMessage,
    ) => void,
    ): this
    off(
    event: string | symbol,
    listener: (this: WebSocket_2, ...args: any[]) => void,
    ): this

    addListener(
    event: 'close',
    listener: (code: number, reason: Buffer) => void,
    ): this
    addListener(event: 'error', listener: (err: Error) => void): this
    addListener(
    event: 'upgrade',
    listener: (request: IncomingMessage) => void,
    ): this
    addListener(
    event: 'message',
    listener: (data: WebSocket_2.RawData, isBinary: boolean) => void,
    ): this
    addListener(event: 'open', listener: () => void): this
    addListener(event: 'ping' | 'pong', listener: (data: Buffer) => void): this
    addListener(
    event: 'unexpected-response',
    listener: (request: ClientRequest, response: IncomingMessage) => void,
    ): this
    addListener(event: string | symbol, listener: (...args: any[]) => void): this

    removeListener(
    event: 'close',
    listener: (code: number, reason: Buffer) => void,
    ): this
    removeListener(event: 'error', listener: (err: Error) => void): this
    removeListener(
    event: 'upgrade',
    listener: (request: IncomingMessage) => void,
    ): this
    removeListener(
    event: 'message',
    listener: (data: WebSocket_2.RawData, isBinary: boolean) => void,
    ): this
    removeListener(event: 'open', listener: () => void): this
    removeListener(event: 'ping' | 'pong', listener: (data: Buffer) => void): this
    removeListener(
    event: 'unexpected-response',
    listener: (request: ClientRequest, response: IncomingMessage) => void,
    ): this
    removeListener(
    event: string | symbol,
    listener: (...args: any[]) => void,
    ): this
}

declare namespace WebSocket_2 {
    /**
     * Data represents the raw message payload received over the WebSocket.
     */
    type RawData = Buffer | ArrayBuffer | Buffer[]

    /**
     * Data represents the message payload received over the WebSocket.
     */
    type Data = string | Buffer | ArrayBuffer | Buffer[]

    /**
     * CertMeta represents the accepted types for certificate & key data.
     */
    type CertMeta = string | string[] | Buffer | Buffer[]

    /**
     * VerifyClientCallbackSync is a synchronous callback used to inspect the
     * incoming message. The return value (boolean) of the function determines
     * whether or not to accept the handshake.
     */
    type VerifyClientCallbackSync = (info: {
        origin: string
        secure: boolean
        req: IncomingMessage
    }) => boolean

    /**
     * VerifyClientCallbackAsync is an asynchronous callback used to inspect the
     * incoming message. The return value (boolean) of the function determines
     * whether or not to accept the handshake.
     */
    type VerifyClientCallbackAsync = (
    info: { origin: string; secure: boolean; req: IncomingMessage },
    callback: (
    res: boolean,
    code?: number,
    message?: string,
    headers?: OutgoingHttpHeaders,
    ) => void,
    ) => void

    interface ClientOptions extends SecureContextOptions {
        protocol?: string | undefined
        followRedirects?: boolean | undefined
        generateMask?(mask: Buffer): void
        handshakeTimeout?: number | undefined
        maxRedirects?: number | undefined
        perMessageDeflate?: boolean | PerMessageDeflateOptions | undefined
        localAddress?: string | undefined
        protocolVersion?: number | undefined
        headers?: { [key: string]: string } | undefined
        origin?: string | undefined
        agent?: Agent | undefined
        host?: string | undefined
        family?: number | undefined
        checkServerIdentity?(servername: string, cert: CertMeta): boolean
        rejectUnauthorized?: boolean | undefined
        maxPayload?: number | undefined
        skipUTF8Validation?: boolean | undefined
    }

    interface PerMessageDeflateOptions {
        serverNoContextTakeover?: boolean | undefined
        clientNoContextTakeover?: boolean | undefined
        serverMaxWindowBits?: number | undefined
        clientMaxWindowBits?: number | undefined
        zlibDeflateOptions?:
        | {
            flush?: number | undefined
            finishFlush?: number | undefined
            chunkSize?: number | undefined
            windowBits?: number | undefined
            level?: number | undefined
            memLevel?: number | undefined
            strategy?: number | undefined
            dictionary?: Buffer | Buffer[] | DataView | undefined
            info?: boolean | undefined
        }
        | undefined
        zlibInflateOptions?: ZlibOptions | undefined
        threshold?: number | undefined
        concurrencyLimit?: number | undefined
    }

    interface Event {
        type: string
        target: WebSocket
    }

    interface ErrorEvent {
        error: any
        message: string
        type: string
        target: WebSocket
    }

    interface CloseEvent {
        wasClean: boolean
        code: number
        reason: string
        type: string
        target: WebSocket
    }

    interface MessageEvent {
        data: Data
        type: string
        target: WebSocket
    }

    interface EventListenerOptions {
        once?: boolean | undefined
    }

    interface ServerOptions {
        host?: string | undefined
        port?: number | undefined
        backlog?: number | undefined
        server?: Server | Server_2 | undefined
        verifyClient?:
        | VerifyClientCallbackAsync
        | VerifyClientCallbackSync
        | undefined
        handleProtocols?: (
        protocols: Set<string>,
        request: IncomingMessage,
        ) => string | false
        path?: string | undefined
        noServer?: boolean | undefined
        clientTracking?: boolean | undefined
        perMessageDeflate?: boolean | PerMessageDeflateOptions | undefined
        maxPayload?: number | undefined
        skipUTF8Validation?: boolean | undefined
        WebSocket?: typeof WebSocket.WebSocket | undefined
    }

    interface AddressInfo {
        address: string
        family: string
        port: number
    }

    // WebSocket Server
    class Server<T extends WebSocket = WebSocket> extends EventEmitter {
        options: ServerOptions
        path: string
        clients: Set<T>

        constructor(options?: ServerOptions, callback?: () => void)

        address(): AddressInfo | string
        close(cb?: (err?: Error) => void): void
        handleUpgrade(
        request: IncomingMessage,
        socket: Duplex,
        upgradeHead: Buffer,
        callback: (client: T, request: IncomingMessage) => void,
        ): void
        shouldHandle(request: IncomingMessage): boolean | Promise<boolean>

        // Events
        on(
        event: 'connection',
        cb: (this: Server<T>, socket: T, request: IncomingMessage) => void,
        ): this
        on(event: 'error', cb: (this: Server<T>, error: Error) => void): this
        on(
        event: 'headers',
        cb: (
        this: Server<T>,
        headers: string[],
        request: IncomingMessage,
        ) => void,
        ): this
        on(event: 'close' | 'listening', cb: (this: Server<T>) => void): this
        on(
        event: string | symbol,
        listener: (this: Server<T>, ...args: any[]) => void,
        ): this

        once(
        event: 'connection',
        cb: (this: Server<T>, socket: T, request: IncomingMessage) => void,
        ): this
        once(event: 'error', cb: (this: Server<T>, error: Error) => void): this
        once(
        event: 'headers',
        cb: (
        this: Server<T>,
        headers: string[],
        request: IncomingMessage,
        ) => void,
        ): this
        once(event: 'close' | 'listening', cb: (this: Server<T>) => void): this
        once(
        event: string | symbol,
        listener: (this: Server<T>, ...args: any[]) => void,
        ): this

        off(
        event: 'connection',
        cb: (this: Server<T>, socket: T, request: IncomingMessage) => void,
        ): this
        off(event: 'error', cb: (this: Server<T>, error: Error) => void): this
        off(
        event: 'headers',
        cb: (
        this: Server<T>,
        headers: string[],
        request: IncomingMessage,
        ) => void,
        ): this
        off(event: 'close' | 'listening', cb: (this: Server<T>) => void): this
        off(
        event: string | symbol,
        listener: (this: Server<T>, ...args: any[]) => void,
        ): this

        addListener(
        event: 'connection',
        cb: (client: T, request: IncomingMessage) => void,
        ): this
        addListener(event: 'error', cb: (err: Error) => void): this
        addListener(
        event: 'headers',
        cb: (headers: string[], request: IncomingMessage) => void,
        ): this
        addListener(event: 'close' | 'listening', cb: () => void): this
        addListener(
        event: string | symbol,
        listener: (...args: any[]) => void,
        ): this

        removeListener(event: 'connection', cb: (client: T) => void): this
        removeListener(event: 'error', cb: (err: Error) => void): this
        removeListener(
        event: 'headers',
        cb: (headers: string[], request: IncomingMessage) => void,
        ): this
        removeListener(event: 'close' | 'listening', cb: () => void): this
        removeListener(
        event: string | symbol,
        listener: (...args: any[]) => void,
        ): this
    }

    const WebSocketServer: typeof Server
    interface WebSocketServer extends Server {} // tslint:disable-line no-empty-interface
    const WebSocket: typeof WebSocketAlias
    interface WebSocket extends WebSocketAlias {} // tslint:disable-line no-empty-interface

    // WebSocket stream
    function createWebSocketStream(
    websocket: WebSocket,
    options?: DuplexOptions,
    ): Duplex
}
export { WebSocket_2 as WebSocket }

export declare const WebSocketAlias: typeof WebSocket_2;

export declare interface WebSocketAlias extends WebSocket_2 {}

export declare interface WebSocketClient {
    /**
     * Send event to the client
     */
    send(payload: HMRPayload): void;
    /**
     * Send custom event
     */
    send(event: string, payload?: CustomPayload['data']): void;
    /**
     * The raw WebSocket instance
     * @advanced
     */
    socket: WebSocket_2;
}

export declare type WebSocketCustomListener<T> = (data: T, client: WebSocketClient) => void;

export declare interface WebSocketServer {
    /**
     * Listen on port and host
     */
    listen(): void;
    /**
     * Get all connected clients.
     */
    clients: Set<WebSocketClient>;
    /**
     * Broadcast events to all clients
     */
    send(payload: HMRPayload): void;
    /**
     * Send custom event
     */
    send<T extends string>(event: T, payload?: InferCustomEventPayload<T>): void;
    /**
     * Disconnect all clients and terminate the server.
     */
    close(): Promise<void>;
    /**
     * Handle custom event emitted by `import.meta.hot.send`
     */
    on: WebSocket_2.Server['on'] & {
        <T extends string>(event: T, listener: WebSocketCustomListener<InferCustomEventPayload<T>>): void;
    };
    /**
     * Unregister event listener.
     */
    off: WebSocket_2.Server['off'] & {
        (event: string, listener: Function): void;
    };
}

export { }
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        accessibility:
  icons:
    - accessible-icon
    - address-card
    - audio-description
    - braille
    - circle-info
    - circle-question
    - closed-captioning
    - ear-deaf
    - ear-listen
    - eye
    - eye-low-vision
    - fingerprint
    - hands
    - hands-asl-interpreting
    - handshake-angle
    - person-cane
    - person-walking-with-cane
    - phone-volume
    - question
    - tty
    - universal-access
    - wheelchair
    - wheelchair-move
  label: Accessibility
alert:
  icons:
    - bell
    - bell-slash
    - circle-exclamation
    - circle-radiation
    - exclamation
    - question
    - radiation
    - skull-crossbones
    - triangle-exclamation
  label: Alert
alphabet:
  icons:
    - a
    - address-card
    - b
    - c
    - circle-h
    - d
    - e
    - f
    - g
    - h
    - i
    - j
    - k
    - l
    - m
    - 'n'
    - o
    - p
    - q
    - r
    - s
    - square-h
    - t
    - u
    - v
    - w
    - x
    - 'y'
    - z
  label: Alphabet
animals:
  icons:
    - bugs
    - cat
    - cow
    - crow
    - dog
    - dove
    - dragon
    - feather
    - feather-pointed
    - fish
    - fish-fins
    - frog
    - hippo
    - horse
    - horse-head
    - kiwi-bird
    - locust
    - mosquito
    - otter
    - paw
    - shield-cat
    - shield-dog
    - shrimp
    - spider
    - worm
  label: Animals
arrows:
  icons:
    - angle-down
    - angle-left
    - angle-right
    - angle-up
    - angles-down
    - angles-left
    - angles-right
    - angles-up
    - arrow-down
    - arrow-down-1-9
    - arrow-down-9-1
    - arrow-down-a-z
    - arrow-down-long
    - arrow-down-short-wide
    - arrow-down-up-across-line
    - arrow-down-up-lock
    - arrow-down-wide-short
    - arrow-down-z-a
    - arrow-left
    - arrow-left-long
    - arrow-pointer
    - arrow-right
    - arrow-right-arrow-left
    - arrow-right-from-bracket
    - arrow-right-long
    - arrow-right-to-bracket
    - arrow-rotate-left
    - arrow-rotate-right
    - arrow-trend-down
    - arrow-trend-up
    - arrow-turn-down
    - arrow-turn-up
    - arrow-up
    - arrow-up-1-9
    - arrow-up-9-1
    - arrow-up-a-z
    - arrow-up-from-bracket
    - arrow-up-long
    - arrow-up-right-dots
    - arrow-up-right-from-square
    - arrow-up-short-wide
    - arrow-up-wide-short
    - arrow-up-z-a
    - arrows-down-to-line
    - arrows-left-right
    - arrows-left-right-to-line
    - arrows-rotate
    - arrows-spin
    - arrows-split-up-and-left
    - arrows-to-circle
    - arrows-to-dot
    - arrows-to-eye
    - arrows-turn-right
    - arrows-turn-to-dots
    - arrows-up-down
    - arrows-up-down-left-right
    - arrows-up-to-line
    - caret-down
    - caret-left
    - caret-right
    - caret-up
    - chevron-down
    - chevron-left
    - chevron-right
    - chevron-up
    - circle-arrow-down
    - circle-arrow-left
    - circle-arrow-right
    - circle-arrow-up
    - circle-chevron-down
    - circle-chevron-left
    - circle-chevron-right
    - circle-chevron-up
    - circle-down
    - circle-left
    - circle-right
    - circle-up
    - clock-rotate-left
    - cloud-arrow-down
    - cloud-arrow-up
    - down-left-and-up-right-to-center
    - down-long
    - download
    - left-long
    - left-right
    - location-arrow
    - maximize
    - recycle
    - repeat
    - reply
    - reply-all
    - retweet
    - right-from-bracket
    - right-left
    - right-long
    - right-to-bracket
    - rotate
    - rotate-left
    - rotate-right
    - share
    - share-from-square
    - shuffle
    - sort
    - sort-down
    - sort-up
    - square-arrow-up-right
    - square-caret-down
    - square-caret-left
    - square-caret-right
    - square-caret-up
    - square-up-right
    - turn-down
    - turn-up
    - up-down
    - up-down-left-right
    - up-long
    - up-right-and-down-left-from-center
    - up-right-from-square
    - upload
  label: Arrows
astronomy:
  icons:
    - binoculars
    - globe
    - meteor
    - moon
    - satellite
    - satellite-dish
    - shuttle-space
    - user-astronaut
  label: Astronomy
automotive:
  icons:
    - bus
    - bus-simple
    - car
    - car-battery
    - car-burst
    - car-on
    - car-rear
    - car-side
    - car-tunnel
    - caravan
    - charging-station
    - gas-pump
    - gauge
    - gauge-high
    - gauge-simple
    - gauge-simple-high
    - motorcycle
    - oil-can
    - spray-can-sparkles
    - taxi
    - trailer
    - truck
    - truck-field
    - truck-field-un
    - truck-medical
    - truck-monster
    - truck-pickup
    - van-shuttle
  label: Automotive
buildings:
  icons:
    - archway
    - arrow-right-to-city
    - building
    - building-circle-arrow-right
    - building-circle-check
    - building-circle-exclamation
    - building-circle-xmark
    - building-columns
    - building-flag
    - building-lock
    - building-ngo
    - building-shield
    - building-un
    - building-user
    - building-wheat
    - campground
    - church
    - city
    - dungeon
    - gopuram
    - hospital
    - hospital-user
    - hotel
    - house
    - house-chimney
    - house-chimney-crack
    - house-chimney-medical
    - house-chimney-window
    - house-circle-check
    - house-circle-exclamation
    - house-circle-xmark
    - house-crack
    - house-fire
    - house-flag
    - house-lock
    - house-medical
    - house-medical-circle-check
    - house-medical-circle-exclamation
    - house-medical-circle-xmark
    - house-medical-flag
    - igloo
    - industry
    - kaaba
    - landmark
    - landmark-dome
    - landmark-flag
    - monument
    - mosque
    - mountain-city
    - oil-well
    - place-of-worship
    - school
    - school-circle-check
    - school-circle-exclamation
    - school-circle-xmark
    - school-flag
    - school-lock
    - shop
    - shop-lock
    - store
    - synagogue
    - tent
    - tent-arrow-down-to-line
    - tent-arrow-left-right
    - tent-arrow-turn-left
    - tent-arrows-down
    - tents
    - toilet-portable
    - toilets-portable
    - torii-gate
    - tower-observation
    - tree-city
    - vihara
    - warehouse
  label: Buildings
business:
  icons:
    - address-book
    - address-card
    - arrows-spin
    - arrows-to-dot
    - arrows-to-eye
    - bars-progress
    - bars-staggered
    - book
    - box-archive
    - boxes-packing
    - briefcase
    - building
    - bullhorn
    - bullseye
    - business-time
    - cake-candles
    - calculator
    - calendar
    - calendar-days
    - certificate
    - chart-line
    - chart-pie
    - chart-simple
    - city
    - clipboard
    - clipboard-question
    - compass
    - copy
    - copyright
    - envelope
    - envelope-circle-check
    - envelope-open
    - eraser
    - fax
    - file
    - file-circle-plus
    - file-lines
    - floppy-disk
    - folder
    - folder-minus
    - folder-open
    - folder-plus
    - folder-tree
    - glasses
    - globe
    - highlighter
    - house-laptop
    - industry
    - landmark
    - laptop-file
    - list-check
    - magnifying-glass-arrow-right
    - magnifying-glass-chart
    - marker
    - mug-saucer
    - network-wired
    - note-sticky
    - paperclip
    - paste
    - pen
    - pen-clip
    - pen-fancy
    - pen-nib
    - pen-to-square
    - pencil
    - percent
    - person-chalkboard
    - phone
    - phone-flip
    - phone-slash
    - phone-volume
    - print
    - registered
    - scale-balanced
    - scale-unbalanced
    - scale-unbalanced-flip
    - scissors
    - signature
    - sitemap
    - socks
    - square-envelope
    - square-pen
    - square-phone
    - square-phone-flip
    - square-poll-horizontal
    - square-poll-vertical
    - stapler
    - table
    - table-columns
    - tag
    - tags
    - thumbtack
    - timeline
    - trademark
    - vault
    - wallet
  label: Business
camping:
  icons:
    - binoculars
    - bottle-water
    - bucket
    - campground
    - caravan
    - compass
    - faucet
    - faucet-drip
    - fire
    - fire-burner
    - fire-flame-curved
    - frog
    - kit-medical
    - map
    - map-location
    - map-location-dot
    - mattress-pillow
    - mosquito
    - mosquito-net
    - mountain
    - mountain-sun
    - people-roof
    - person-hiking
    - person-shelter
    - route
    - signs-post
    - tarp
    - tarp-droplet
    - tent
    - tent-arrow-down-to-line
    - tent-arrow-left-right
    - tent-arrow-turn-left
    - tent-arrows-down
    - tents
    - toilet-paper
    - trailer
    - tree
  label: Camping
charity:
  icons:
    - circle-dollar-to-slot
    - dollar-sign
    - dove
    - gift
    - globe
    - hand-holding-dollar
    - hand-holding-droplet
    - hand-holding-hand
    - hand-holding-heart
    - hands-holding-child
    - hands-holding-circle
    - handshake
    - handshake-angle
    - handshake-simple
    - heart
    - leaf
    - parachute-box
    - piggy-bank
    - ribbon
    - seedling
  label: Charity
charts-diagrams:
  icons:
    - bars-progress
    - chart-area
    - chart-bar
    - chart-column
    - chart-gantt
    - chart-line
    - chart-pie
    - chart-simple
    - circle-half-stroke
    - diagram-next
    - diagram-predecessor
    - diagram-project
    - diagram-successor
    - square-poll-horizontal
    - square-poll-vertical
  label: Charts + Diagrams
childhood:
  icons:
    - apple-whole
    - baby
    - baby-carriage
    - baseball-bat-ball
    - bath
    - bucket
    - cake-candles
    - child
    - child-dress
    - child-reaching
    - children
    - cookie
    - cookie-bite
    - cubes-stacked
    - gamepad
    - hands-holding-child
    - ice-cream
    - mitten
    - person-biking
    - person-breastfeeding
    - puzzle-piece
    - robot
    - school
    - shapes
    - snowman
  label: Childhood
clothing-fashion:
  icons:
    - glasses
    - graduation-cap
    - hat-cowboy
    - hat-cowboy-side
    - hat-wizard
    - mitten
    - shirt
    - shoe-prints
    - socks
    - user-tie
    - vest
    - vest-patches
  label: Clothing + Fashion
coding:
  icons:
    - barcode
    - bars
    - bars-staggered
    - bath
    - box-archive
    - bug
    - bug-slash
    - circle-nodes
    - code
    - code-branch
    - code-commit
    - code-compare
    - code-fork
    - code-merge
    - code-pull-request
    - cube
    - cubes
    - diagram-project
    - file
    - file-code
    - file-lines
    - filter
    - fire-extinguisher
    - folder
    - folder-open
    - font-awesome
    - gear
    - gears
    - keyboard
    - laptop-code
    - microchip
    - mug-saucer
    - network-wired
    - notdef
    - qrcode
    - rectangle-xmark
    - shield
    - shield-halved
    - sitemap
    - terminal
    - user-secret
    - window-maximize
    - window-minimize
    - window-restore
  label: Coding
communication:
  icons:
    - address-book
    - address-card
    - at
    - blender-phone
    - bluetooth-b
    - bullhorn
    - comment
    - comment-dots
    - comment-medical
    - comment-slash
    - comment-sms
    - comments
    - ear-listen
    - envelope
    - envelope-circle-check
    - envelope-open
    - face-frown
    - face-meh
    - face-smile
    - fax
    - hands-asl-interpreting
    - icons
    - inbox
    - language
    - message
    - microphone
    - microphone-lines
    - microphone-lines-slash
    - microphone-slash
    - mobile
    - mobile-button
    - mobile-retro
    - mobile-screen
    - mobile-screen-button
    - paper-plane
    - phone
    - phone-flip
    - phone-slash
    - phone-volume
    - poo
    - quote-left
    - quote-right
    - square-envelope
    - square-phone
    - square-phone-flip
    - square-rss
    - tower-cell
    - tty
    - video
    - video-slash
    - voicemail
    - walkie-talkie
  label: Communication
connectivity:
  icons:
    - bluetooth
    - circle-nodes
    - cloud
    - cloud-arrow-down
    - cloud-arrow-up
    - ethernet
    - globe
    - house-signal
    - rss
    - satellite-dish
    - signal
    - tower-broadcast
    - tower-cell
    - wifi
  label: Connectivity
construction:
  icons:
    - arrow-up-from-ground-water
    - bore-hole
    - brush
    - bucket
    - compass-drafting
    - dumpster
    - dumpster-fire
    - hammer
    - helmet-safety
    - mound
    - paint-roller
    - pen-ruler
    - pencil
    - person-digging
    - ruler
    - ruler-combined
    - ruler-horizontal
    - ruler-vertical
    - screwdriver
    - screwdriver-wrench
    - sheet-plastic
    - tarp
    - tarp-droplet
    - toilet-portable
    - toilets-portable
    - toolbox
    - trowel
    - trowel-bricks
    - truck-pickup
    - wrench
  label: Construction
design:
  icons:
    - bezier-curve
    - brush
    - circle-half-stroke
    - circle-nodes
    - clone
    - compass-drafting
    - copy
    - crop
    - crop-simple
    - crosshairs
    - cube
    - cubes
    - draw-polygon
    - droplet
    - droplet-slash
    - eraser
    - eye
    - eye-dropper
    - eye-slash
    - fill
    - fill-drip
    - floppy-disk
    - font-awesome
    - highlighter
    - icons
    - layer-group
    - lines-leaning
    - marker
    - object-group
    - object-ungroup
    - paint-roller
    - paintbrush
    - palette
    - paste
    - pen
    - pen-clip
    - pen-fancy
    - pen-nib
    - pen-ruler
    - pen-to-square
    - pencil
    - ruler-combined
    - ruler-horizontal
    - ruler-vertical
    - scissors
    - splotch
    - spray-can
    - stamp
    - stapler
    - swatchbook
    - vector-square
    - wand-magic
    - wand-magic-sparkles
  label: Design
devices-hardware:
  icons:
    - blender-phone
    - camera
    - camera-retro
    - car-battery
    - compact-disc
    - computer
    - computer-mouse
    - database
    - desktop
    - display
    - download
    - ethernet
    - fax
    - floppy-disk
    - gamepad
    - hard-drive
    - headphones
    - house-laptop
    - keyboard
    - laptop
    - laptop-file
    - memory
    - microchip
    - mobile
    - mobile-button
    - mobile-retro
    - mobile-screen
    - mobile-screen-button
    - plug
    - power-off
    - print
    - satellite
    - satellite-dish
    - sd-card
    - server
    - sim-card
    - tablet
    - tablet-button
    - tablet-screen-button
    - tachograph-digital
    - tv
    - upload
    - walkie-talkie
  label: Devices + Hardware
disaster:
  icons:
    - biohazard
    - bugs
    - burst
    - child-combatant
    - circle-radiation
    - cloud-bolt
    - cloud-showers-heavy
    - cloud-showers-water
    - helmet-un
    - hill-avalanche
    - hill-rockslide
    - house-chimney-crack
    - house-crack
    - house-fire
    - house-flood-water
    - house-flood-water-circle-arrow-right
    - house-tsunami
    - hurricane
    - locust
    - mosquito
    - person-drowning
    - person-rifle
    - person-walking-arrow-loop-left
    - person-walking-arrow-right
    - person-walking-dashed-line-arrow-right
    - plant-wilt
    - radiation
    - snowflake
    - sun-plant-wilt
    - temperature-arrow-down
    - temperature-arrow-up
    - tornado
    - volcano
    - wheat-awn-circle-exclamation
    - wind
    - worm
    - xmarks-lines
  label: Disaster + Crisis
editing:
  icons:
    - arrows-rotate
    - bandage
    - bars
    - brush
    - chart-simple
    - check
    - check-double
    - circle-check
    - circle-half-stroke
    - crop
    - crop-simple
    - cube
    - delete-left
    - ellipsis
    - ellipsis-vertical
    - eye-dropper
    - eye-slash
    - gear
    - grip
    - grip-lines
    - grip-lines-vertical
    - grip-vertical
    - link
    - link-slash
    - minus
    - paintbrush
    - pen
    - pen-clip
    - pen-fancy
    - pen-nib
    - pen-ruler
    - pen-to-square
    - pencil
    - plus
    - rotate
    - scissors
    - signature
    - sliders
    - square-check
    - square-pen
    - trash
    - trash-arrow-up
    - trash-can
    - trash-can-arrow-up
    - wand-magic
    - wand-magic-sparkles
    - xmark
  label: Editing
education:
  icons:
    - apple-whole
    - atom
    - award
    - bell
    - bell-slash
    - book-open
    - book-open-reader
    - chalkboard
    - chalkboard-user
    - graduation-cap
    - laptop-code
    - laptop-file
    - masks-theater
    - microscope
    - music
    - person-chalkboard
    - school
    - school-circle-check
    - school-circle-exclamation
    - school-circle-xmark
    - school-flag
    - school-lock
    - shapes
    - user-graduate
  label: Education
emoji:
  icons:
    - face-angry
    - face-dizzy
    - face-flushed
    - face-frown
    - face-frown-open
    - face-grimace
    - face-grin
    - face-grin-beam
    - face-grin-beam-sweat
    - face-grin-hearts
    - face-grin-squint
    - face-grin-squint-tears
    - face-grin-stars
    - face-grin-tears
    - face-grin-tongue
    - face-grin-tongue-squint
    - face-grin-tongue-wink
    - face-grin-wide
    - face-grin-wink
    - face-kiss
    - face-kiss-beam
    - face-kiss-wink-heart
    - face-laugh
    - face-laugh-beam
    - face-laugh-squint
    - face-laugh-wink
    - face-meh
    - face-meh-blank
    - face-rolling-eyes
    - face-sad-cry
    - face-sad-tear
    - face-smile
    - face-smile-beam
    - face-smile-wink
    - face-surprise
    - face-tired
  label: Emoji
energy:
  icons:
    - arrow-up-from-ground-water
    - atom
    - battery-empty
    - battery-full
    - battery-half
    - battery-quarter
    - battery-three-quarters
    - bolt
    - car-battery
    - charging-station
    - circle-radiation
    - explosion
    - fan
    - fire
    - fire-flame-curved
    - fire-flame-simple
    - gas-pump
    - industry
    - leaf
    - lightbulb
    - oil-well
    - plug
    - plug-circle-bolt
    - plug-circle-check
    - plug-circle-exclamation
    - plug-circle-minus
    - plug-circle-plus
    - plug-circle-xmark
    - poop
    - power-off
    - radiation
    - seedling
    - solar-panel
    - sun
    - tower-broadcast
    - water
    - wind
  label: Energy
files:
  icons:
    - box-archive
    - clone
    - copy
    - file
    - file-arrow-down
    - file-arrow-up
    - file-audio
    - file-circle-check
    - file-circle-exclamation
    - file-circle-minus
    - file-circle-plus
    - file-circle-question
    - file-circle-xmark
    - file-code
    - file-csv
    - file-excel
    - file-export
    - file-image
    - file-import
    - file-lines
    - file-pdf
    - file-pen
    - file-powerpoint
    - file-shield
    - file-video
    - file-word
    - file-zipper
    - floppy-disk
    - folder
    - folder-closed
    - folder-open
    - note-sticky
    - paste
    - photo-film
    - scissors
  label: Files
film-video:
  icons:
    - audio-description
    - circle
    - clapperboard
    - closed-captioning
    - compact-disc
    - file-audio
    - file-video
    - film
    - headphones
    - microphone
    - microphone-lines
    - microphone-lines-slash
    - microphone-slash
    - photo-film
    - podcast
    - square-rss
    - ticket
    - tower-broadcast
    - tower-cell
    - tv
    - video
    - video-slash
    - youtube
  label: Film + Video
food-beverage:
  icons:
    - apple-whole
    - bacon
    - beer-mug-empty
    - blender
    - bone
    - bottle-droplet
    - bottle-water
    - bowl-food
    - bowl-rice
    - bread-slice
    - burger
    - cake-candles
    - candy-cane
    - carrot
    - champagne-glasses
    - cheese
    - cloud-meatball
    - cookie
    - cubes-stacked
    - drumstick-bite
    - egg
    - fish
    - fish-fins
    - flask
    - glass-water
    - glass-water-droplet
    - hotdog
    - ice-cream
    - jar
    - jar-wheat
    - lemon
    - martini-glass
    - martini-glass-citrus
    - martini-glass-empty
    - mug-hot
    - mug-saucer
    - pepper-hot
    - pizza-slice
    - plate-wheat
    - seedling
    - shrimp
    - stroopwafel
    - wheat-awn
    - wheat-awn-circle-exclamation
    - whiskey-glass
    - wine-bottle
    - wine-glass
    - wine-glass-empty
  label: Food + Beverage
fruits-vegetables:
  icons:
    - apple-whole
    - carrot
    - leaf
    - lemon
    - pepper-hot
    - seedling
  label: Fruits + Vegetables
gaming:
  icons:
    - book-skull
    - chess
    - chess-bishop
    - chess-board
    - chess-king
    - chess-knight
    - chess-pawn
    - chess-queen
    - chess-rook
    - critical-role
    - d-and-d
    - d-and-d-beyond
    - diamond
    - dice
    - dice-d20
    - dice-d6
    - dice-five
    - dice-four
    - dice-one
    - dice-six
    - dice-three
    - dice-two
    - dragon
    - dungeon
    - fantasy-flight-games
    - gamepad
    - ghost
    - hand-fist
    - hat-wizard
    - headset
    - heart
    - playstation
    - puzzle-piece
    - ring
    - scroll
    - shield-halved
    - skull-crossbones
    - square-full
    - square-steam
    - steam
    - steam-symbol
    - twitch
    - vr-cardboard
    - wand-sparkles
    - wizards-of-the-coast
    - xbox
  label: Gaming
gender:
  icons:
    - genderless
    - mars
    - mars-and-venus
    - mars-double
    - mars-stroke
    - mars-stroke-right
    - mars-stroke-up
    - mercury
    - neuter
    - person-half-dress
    - transgender
    - venus
    - venus-double
    - venus-mars
  label: Genders
halloween:
  icons:
    - book-skull
    - broom
    - cat
    - cloud-moon
    - crow
    - ghost
    - hat-wizard
    - mask
    - skull
    - skull-crossbones
    - spider
    - toilet-paper
    - wand-sparkles
  label: Halloween
hands:
  icons:
    - hand
    - hand-back-fist
    - hand-dots
    - hand-fist
    - hand-holding
    - hand-holding-dollar
    - hand-holding-droplet
    - hand-holding-hand
    - hand-holding-heart
    - hand-holding-medical
    - hand-lizard
    - hand-middle-finger
    - hand-peace
    - hand-point-down
    - hand-point-left
    - hand-point-right
    - hand-point-up
    - hand-pointer
    - hand-scissors
    - hand-sparkles
    - hand-spock
    - hands-bound
    - hands-bubbles
    - hands-clapping
    - hands-holding
    - hands-holding-child
    - hands-holding-circle
    - hands-praying
    - handshake
    - handshake-angle
    - handshake-simple
    - handshake-simple-slash
    - handshake-slash
    - thumbs-down
    - thumbs-up
  label: Hands
holidays:
  icons:
    - candy-cane
    - carrot
    - champagne-glasses
    - cookie-bite
    - face-grin-hearts
    - face-kiss-wink-heart
    - gift
    - gifts
    - heart
    - holly-berry
    - menorah
    - mug-hot
    - sleigh
    - snowman
  label: Holidays
household:
  icons:
    - arrow-up-from-water-pump
    - bath
    - bed
    - bell
    - blender
    - box-tissue
    - chair
    - computer
    - couch
    - door-closed
    - door-open
    - dungeon
    - fan
    - faucet
    - faucet-drip
    - fire-burner
    - house-chimney-user
    - house-chimney-window
    - house-fire
    - house-laptop
    - house-lock
    - house-signal
    - house-user
    - jar
    - jar-wheat
    - jug-detergent
    - kitchen-set
    - lightbulb
    - mattress-pillow
    - mug-saucer
    - people-roof
    - plug
    - pump-soap
    - rug
    - sheet-plastic
    - shower
    - sink
    - snowflake
    - soap
    - spoon
    - stairs
    - temperature-arrow-down
    - temperature-arrow-up
    - toilet
    - toilet-paper
    - toilet-paper-slash
    - tv
    - utensils
  label: Household
humanitarian:
  icons:
    - anchor
    - anchor-circle-check
    - anchor-circle-exclamation
    - anchor-circle-xmark
    - anchor-lock
    - arrow-down-up-across-line
    - arrow-down-up-lock
    - arrow-right-to-city
    - arrow-up-from-ground-water
    - arrow-up-from-water-pump
    - arrow-up-right-dots
    - arrow-up-right-from-square
    - arrows-down-to-line
    - arrows-down-to-people
    - arrows-left-right-to-line
    - arrows-spin
    - arrows-split-up-and-left
    - arrows-to-circle
    - arrows-to-dot
    - arrows-to-eye
    - arrows-turn-right
    - arrows-turn-to-dots
    - arrows-up-to-line
    - baby
    - bacterium
    - ban
    - bed
    - biohazard
    - book-bookmark
    - bore-hole
    - bottle-droplet
    - bottle-water
    - bowl-food
    - bowl-rice
    - boxes-packing
    - bridge
    - bridge-circle-check
    - bridge-circle-exclamation
    - bridge-circle-xmark
    - bridge-lock
    - bridge-water
    - bucket
    - bugs
    - building
    - building-circle-arrow-right
    - building-circle-check
    - building-circle-exclamation
    - building-circle-xmark
    - building-columns
    - building-flag
    - building-lock
    - building-ngo
    - building-shield
    - building-un
    - building-user
    - building-wheat
    - burst
    - bus
    - car
    - car-on
    - car-tunnel
    - child-combatant
    - children
    - church
    - circle-h
    - circle-nodes
    - clipboard-question
    - clipboard-user
    - cloud-bolt
    - cloud-showers-heavy
    - cloud-showers-water
    - computer
    - cow
    - cubes-stacked
    - display
    - droplet
    - envelope
    - envelope-circle-check
    - explosion
    - faucet-drip
    - fax
    - ferry
    - file
    - file-circle-check
    - file-circle-exclamation
    - file-circle-minus
    - file-circle-plus
    - file-circle-question
    - file-circle-xmark
    - file-csv
    - file-pdf
    - file-pen
    - file-shield
    - fire-burner
    - fire-flame-simple
    - fish-fins
    - flag
    - flask-vial
    - gas-pump
    - glass-water
    - glass-water-droplet
    - gopuram
    - group-arrows-rotate
    - hammer
    - hand-holding-hand
    - handcuffs
    - hands-bound
    - hands-bubbles
    - hands-holding-child
    - hands-holding-circle
    - handshake-simple
    - headset
    - heart-circle-bolt
    - heart-circle-check
    - heart-circle-exclamation
    - heart-circle-minus
    - heart-circle-plus
    - heart-circle-xmark
    - helicopter
    - helicopter-symbol
    - helmet-un
    - hill-avalanche
    - hill-rockslide
    - hospital
    - hotel
    - house-chimney
    - house-chimney-crack
    - house-circle-check
    - house-circle-exclamation
    - house-circle-xmark
    - house-fire
    - house-flag
    - house-flood-water
    - house-flood-water-circle-arrow-right
    - house-lock
    - house-medical
    - house-medical-circle-check
    - house-medical-circle-exclamation
    - house-medical-circle-xmark
    - house-medical-flag
    - house-signal
    - house-tsunami
    - hurricane
    - id-card
    - jar
    - jar-wheat
    - jet-fighter-up
    - jug-detergent
    - kitchen-set
    - land-mine-on
    - landmark
    - landmark-dome
    - landmark-flag
    - laptop
    - laptop-file
    - life-ring
    - lines-leaning
    - location-pin-lock
    - locust
    - lungs
    - magnifying-glass-arrow-right
    - magnifying-glass-chart
    - mars-and-venus
    - mars-and-venus-burst
    - mask-face
    - mask-ventilator
    - mattress-pillow
    - microscope
    - mobile-retro
    - mobile-screen
    - money-bill-transfer
    - money-bill-trend-up
    - money-bill-wheat
    - money-bills
    - mosque
    - mosquito
    - mosquito-net
    - mound
    - mountain-city
    - mountain-sun
    - oil-well
    - parachute-box
    - people-arrows
    - people-group
    - people-line
    - people-pulling
    - people-robbery
    - people-roof
    - person
    - person-arrow-down-to-line
    - person-arrow-up-from-line
    - person-breastfeeding
    - person-burst
    - person-cane
    - person-chalkboard
    - person-circle-check
    - person-circle-exclamation
    - person-circle-minus
    - person-circle-plus
    - person-circle-question
    - person-circle-xmark
    - person-digging
    - person-dress
    - person-dress-burst
    - person-drowning
    - person-falling
    - person-falling-burst
    - person-half-dress
    - person-harassing
    - person-military-pointing
    - person-military-rifle
    - person-military-to-person
    - person-pregnant
    - person-rays
    - person-rifle
    - person-shelter
    - person-through-window
    - person-walking
    - person-walking-arrow-loop-left
    - person-walking-arrow-right
    - person-walking-dashed-line-arrow-right
    - person-walking-luggage
    - pills
    - plane-circle-check
    - plane-circle-exclamation
    - plane-circle-xmark
    - plane-lock
    - plane-up
    - plant-wilt
    - plate-wheat
    - plug
    - plug-circle-bolt
    - plug-circle-check
    - plug-circle-exclamation
    - plug-circle-minus
    - plug-circle-plus
    - plug-circle-xmark
    - pump-soap
    - radiation
    - radio
    - ranking-star
    - road
    - road-barrier
    - road-bridge
    - road-circle-check
    - road-circle-exclamation
    - road-circle-xmark
    - road-lock
    - road-spikes
    - rug
    - sack-dollar
    - sack-xmark
    - sailboat
    - satellite-dish
    - scale-balanced
    - school
    - school-circle-check
    - school-circle-exclamation
    - school-circle-xmark
    - school-flag
    - school-lock
    - seedling
    - sheet-plastic
    - shield-cat
    - shield-dog
    - shield-heart
    - ship
    - shirt
    - shop
    - shop-lock
    - shower
    - skull-crossbones
    - snowflake
    - soap
    - square-nfi
    - square-person-confined
    - square-virus
    - staff-snake
    - stethoscope
    - suitcase-medical
    - sun-plant-wilt
    - syringe
    - tarp
    - tarp-droplet
    - temperature-arrow-down
    - temperature-arrow-up
    - tent
    - tent-arrow-down-to-line
    - tent-arrow-left-right
    - tent-arrow-turn-left
    - tent-arrows-down
    - tents
    - toilet
    - toilet-portable
    - toilets-portable
    - tornado
    - tower-broadcast
    - tower-cell
    - tower-observation
    - train-subway
    - trash-can
    - tree-city
    - trowel
    - trowel-bricks
    - truck
    - truck-arrow-right
    - truck-droplet
    - truck-field
    - truck-field-un
    - truck-front
    - truck-medical
    - truck-plane
    - user-doctor
    - user-injured
    - users-between-lines
    - users-line
    - users-rays
    - users-rectangle
    - users-viewfinder
    - vial-circle-check
    - vial-virus
    - vihara
    - virus
    - virus-covid
    - volcano
    - walkie-talkie
    - wheat-awn
    - wheat-awn-circle-exclamation
    - wheelchair-move
    - wifi
    - wind
    - worm
    - xmarks-lines
  label: Humanitarian
logistics:
  icons:
    - anchor
    - anchor-circle-check
    - anchor-circle-exclamation
    - anchor-circle-xmark
    - anchor-lock
    - box
    - boxes-packing
    - boxes-stacked
    - bridge
    - bridge-circle-check
    - bridge-circle-exclamation
    - bridge-circle-xmark
    - bridge-lock
    - bridge-water
    - bus
    - bus-simple
    - car
    - car-tunnel
    - cart-flatbed
    - chart-simple
    - clipboard-check
    - clipboard-list
    - clipboard-question
    - dolly
    - ferry
    - gas-pump
    - gears
    - helicopter
    - helicopter-symbol
    - helmet-safety
    - jet-fighter-up
    - pallet
    - plane-circle-check
    - plane-circle-exclamation
    - plane-circle-xmark
    - plane-lock
    - road
    - road-barrier
    - road-bridge
    - road-circle-check
    - road-circle-exclamation
    - road-circle-xmark
    - road-lock
    - sailboat
    - square-nfi
    - train
    - train-subway
    - truck
    - truck-arrow-right
    - truck-fast
    - truck-field
    - truck-field-un
    - truck-front
    - truck-plane
    - warehouse
    - xmarks-lines
  label: Logistics
maps:
  icons:
    - anchor
    - bag-shopping
    - basket-shopping
    - bath
    - bed
    - beer-mug-empty
    - bell
    - bell-slash
    - bicycle
    - binoculars
    - bomb
    - book
    - book-atlas
    - bookmark
    - bridge
    - bridge-water
    - briefcase
    - building
    - building-columns
    - cake-candles
    - car
    - cart-shopping
    - circle-info
    - crosshairs
    - diamond-turn-right
    - dollar-sign
    - draw-polygon
    - droplet
    - eye
    - eye-low-vision
    - eye-slash
    - fire
    - fire-extinguisher
    - fire-flame-curved
    - flag
    - flag-checkered
    - flask
    - gamepad
    - gavel
    - gift
    - globe
    - graduation-cap
    - heart
    - heart-pulse
    - helicopter
    - helicopter-symbol
    - hospital
    - house
    - image
    - images
    - industry
    - info
    - jet-fighter
    - key
    - landmark
    - landmark-flag
    - layer-group
    - leaf
    - lemon
    - life-ring
    - lightbulb
    - location-arrow
    - location-crosshairs
    - location-dot
    - location-pin
    - location-pin-lock
    - magnet
    - magnifying-glass
    - magnifying-glass-minus
    - magnifying-glass-plus
    - map
    - map-pin
    - martini-glass-empty
    - money-bill
    - money-bill-1
    - monument
    - motorcycle
    - mountain-sun
    - mug-saucer
    - music
    - newspaper
    - paw
    - person
    - person-walking-with-cane
    - phone
    - phone-flip
    - phone-volume
    - plane
    - plug
    - plus
    - print
    - recycle
    - restroom
    - road
    - rocket
    - route
    - scale-balanced
    - scale-unbalanced
    - scale-unbalanced-flip
    - ship
    - shoe-prints
    - shower
    - signs-post
    - snowplow
    - spoon
    - square-h
    - square-parking
    - square-phone
    - square-phone-flip
    - square-plus
    - street-view
    - suitcase
    - suitcase-medical
    - tag
    - tags
    - taxi
    - thumbtack
    - ticket
    - ticket-simple
    - traffic-light
    - train
    - train-subway
    - train-tram
    - tree
    - trophy
    - truck
    - truck-medical
    - tty
    - umbrella
    - utensils
    - vest
    - vest-patches
    - wheelchair
    - wheelchair-move
    - wifi
    - wine-glass
    - wrench
  label: Maps
maritime:
  icons:
    - anchor
    - anchor-circle-check
    - anchor-circle-exclamation
    - anchor-circle-xmark
    - anchor-lock
    - ferry
    - fish
    - fish-fins
    - otter
    - person-swimming
    - sailboat
    - ship
    - shrimp
    - water
  label: Maritime
marketing:
  icons:
    - arrows-spin
    - arrows-to-dot
    - arrows-to-eye
    - bullhorn
    - bullseye
    - chart-simple
    - comment-dollar
    - comments-dollar
    - envelope-open-text
    - envelopes-bulk
    - filter-circle-dollar
    - group-arrows-rotate
    - lightbulb
    - magnifying-glass-arrow-right
    - magnifying-glass-chart
    - magnifying-glass-dollar
    - magnifying-glass-location
    - people-group
    - person-rays
    - ranking-star
    - rectangle-ad
    - square-poll-horizontal
    - square-poll-vertical
    - timeline
  label: Marketing
mathematics:
  icons:
    - calculator
    - circle-minus
    - circle-plus
    - circle-xmark
    - divide
    - equals
    - greater-than
    - greater-than-equal
    - infinity
    - less-than
    - less-than-equal
    - minus
    - not-equal
    - percent
    - plus
    - plus-minus
    - square-minus
    - square-root-variable
    - square-xmark
    - subscript
    - superscript
    - wave-square
    - xmark
  label: Mathematics
media-playback:
  icons:
    - arrow-rotate-left
    - arrow-rotate-right
    - arrows-rotate
    - backward
    - backward-fast
    - backward-step
    - circle-pause
    - circle-play
    - circle-stop
    - compress
    - down-left-and-up-right-to-center
    - eject
    - expand
    - forward
    - forward-fast
    - forward-step
    - hand
    - maximize
    - minimize
    - music
    - pause
    - phone-volume
    - play
    - plus-minus
    - repeat
    - rotate
    - rotate-left
    - rotate-right
    - rss
    - shuffle
    - sliders
    - stop
    - up-right-and-down-left-from-center
    - volume-high
    - volume-low
    - volume-off
    - volume-xmark
  label: Media Playback
medical-health:
  icons:
    - accessible-icon
    - bacteria
    - bacterium
    - ban-smoking
    - bandage
    - bed-pulse
    - biohazard
    - bone
    - bong
    - book-medical
    - brain
    - briefcase-medical
    - cannabis
    - capsules
    - circle-h
    - circle-radiation
    - clipboard-user
    - clock-rotate-left
    - comment-medical
    - crutch
    - disease
    - dna
    - eye
    - eye-dropper
    - file-medical
    - file-prescription
    - file-waveform
    - fire-flame-simple
    - flask
    - flask-vial
    - hand-dots
    - hand-holding-medical
    - head-side-cough
    - head-side-cough-slash
    - head-side-mask
    - head-side-virus
    - heart
    - heart-circle-bolt
    - heart-circle-check
    - heart-circle-exclamation
    - heart-circle-minus
    - heart-circle-plus
    - heart-circle-xmark
    - heart-pulse
    - hospital
    - hospital-user
    - house-chimney-medical
    - house-medical
    - house-medical-circle-check
    - house-medical-circle-exclamation
    - house-medical-circle-xmark
    - house-medical-flag
    - id-card-clip
    - joint
    - kit-medical
    - laptop-medical
    - lungs
    - lungs-virus
    - mask-face
    - mask-ventilator
    - microscope
    - mortar-pestle
    - notes-medical
    - pager
    - person-breastfeeding
    - person-cane
    - person-dots-from-line
    - person-half-dress
    - pills
    - plus
    - poop
    - prescription
    - prescription-bottle
    - prescription-bottle-medical
    - pump-medical
    - radiation
    - receipt
    - shield-virus
    - skull
    - skull-crossbones
    - smoking
    - square-h
    - square-plus
    - square-virus
    - staff-snake
    - star-of-life
    - stethoscope
    - suitcase-medical
    - syringe
    - tablets
    - teeth
    - teeth-open
    - thermometer
    - tooth
    - truck-medical
    - user-doctor
    - user-nurse
    - vial
    - vial-circle-check
    - vial-virus
    - vials
    - virus
    - virus-covid
    - virus-covid-slash
    - virus-slash
    - viruses
    - weight-scale
    - wheelchair
    - wheelchair-move
    - x-ray
  label: Medical + Health
money:
  icons:
    - austral-sign
    - baht-sign
    - bangladeshi-taka-sign
    - bitcoin
    - bitcoin-sign
    - brazilian-real-sign
    - btc
    - cash-register
    - cedi-sign
    - cent-sign
    - chart-line
    - chart-pie
    - circle-dollar-to-slot
    - coins
    - colon-sign
    - comment-dollar
    - comments-dollar
    - credit-card
    - cruzeiro-sign
    - dollar-sign
    - dong-sign
    - ethereum
    - euro-sign
    - file-invoice
    - file-invoice-dollar
    - florin-sign
    - franc-sign
    - gg
    - gg-circle
    - guarani-sign
    - hand-holding-dollar
    - hryvnia-sign
    - indian-rupee-sign
    - kip-sign
    - landmark
    - lari-sign
    - lira-sign
    - litecoin-sign
    - manat-sign
    - mill-sign
    - money-bill
    - money-bill-1
    - money-bill-1-wave
    - money-bill-transfer
    - money-bill-trend-up
    - money-bill-wave
    - money-bill-wheat
    - money-bills
    - money-check
    - money-check-dollar
    - naira-sign
    - percent
    - peseta-sign
    - peso-sign
    - piggy-bank
    - receipt
    - ruble-sign
    - rupee-sign
    - rupiah-sign
    - sack-dollar
    - sack-xmark
    - scale-balanced
    - scale-unbalanced
    - scale-unbalanced-flip
    - shekel-sign
    - stamp
    - sterling-sign
    - tenge-sign
    - turkish-lira-sign
    - vault
    - wallet
    - won-sign
    - yen-sign
  label: Money
moving:
  icons:
    - box-archive
    - box-open
    - boxes-packing
    - caravan
    - couch
    - dolly
    - house-chimney
    - people-carry-box
    - route
    - sign-hanging
    - suitcase
    - tape
    - trailer
    - truck-moving
    - truck-ramp-box
    - wine-glass
  label: Moving
music-audio:
  icons:
    - compact-disc
    - drum
    - drum-steelpan
    - file-audio
    - guitar
    - headphones
    - headphones-simple
    - microphone
    - microphone-lines
    - microphone-lines-slash
    - microphone-slash
    - music
    - napster
    - radio
    - record-vinyl
    - sliders
    - soundcloud
    - spotify
    - volume-high
    - volume-low
    - volume-off
    - volume-xmark
  label: Music + Audio
nature:
  icons:
    - binoculars
    - bug
    - bugs
    - cannabis
    - cloud-sun
    - clover
    - feather
    - feather-pointed
    - fire
    - frog
    - icicles
    - leaf
    - locust
    - mosquito
    - mound
    - mountain
    - mountain-city
    - mountain-sun
    - person-hiking
    - plant-wilt
    - seedling
    - signs-post
    - spider
    - tree
    - volcano
    - water
    - wind
    - worm
  label: Nature
numbers:
  icons:
    - '0'
    - '1'
    - '2'
    - '3'
    - '4'
    - '5'
    - '6'
    - '7'
    - '8'
    - '9'
  label: Numbers
photos-images:
  icons:
    - bolt
    - bolt-lightning
    - camera
    - camera-retro
    - camera-rotate
    - chalkboard
    - circle-half-stroke
    - clone
    - droplet
    - eye
    - eye-dropper
    - eye-slash
    - file-image
    - film
    - id-badge
    - id-card
    - image
    - image-portrait
    - images
    - minimize
    - panorama
    - photo-film
    - sliders
    - unsplash
  label: Photos + Images
political:
  icons:
    - award
    - building-flag
    - bullhorn
    - check-double
    - check-to-slot
    - circle-dollar-to-slot
    - democrat
    - dove
    - dumpster-fire
    - flag-usa
    - hand-fist
    - handshake
    - landmark-dome
    - landmark-flag
    - person-booth
    - piggy-bank
    - republican
    - scale-balanced
    - scale-unbalanced
    - scale-unbalanced-flip
  label: Political
punctuation-symbols:
  icons:
    - asterisk
    - at
    - check
    - check-double
    - circle-exclamation
    - circle-question
    - equals
    - exclamation
    - greater-than
    - hashtag
    - less-than
    - minus
    - percent
    - plus
    - question
    - quote-left
    - quote-right
    - section
  label: Punctuation + Symbols
religion:
  icons:
    - ankh
    - atom
    - bahai
    - book-bible
    - book-journal-whills
    - book-quran
    - book-tanakh
    - church
    - cross
    - dharmachakra
    - dove
    - gopuram
    - hamsa
    - hands-praying
    - hanukiah
    - jedi
    - kaaba
    - khanda
    - menorah
    - mosque
    - om
    - peace
    - person-praying
    - place-of-worship
    - scroll-torah
    - spaghetti-monster-flying
    - star-and-crescent
    - star-of-david
    - synagogue
    - torii-gate
    - vihara
    - yin-yang
  label: Religion
science:
  icons:
    - atom
    - biohazard
    - brain
    - capsules
    - circle-radiation
    - clipboard-check
    - disease
    - dna
    - eye-dropper
    - filter
    - fire
    - fire-flame-curved
    - fire-flame-simple
    - flask
    - flask-vial
    - frog
    - magnet
    - microscope
    - mortar-pestle
    - pills
    - prescription-bottle
    - radiation
    - seedling
    - skull-crossbones
    - square-virus
    - syringe
    - tablets
    - temperature-high
    - temperature-low
    - vial
    - vial-circle-check
    - vial-virus
    - vials
  label: Science
science-fiction:
  icons:
    - atom
    - book-journal-whills
    - explosion
    - galactic-republic
    - galactic-senate
    - hand-spock
    - jedi
    - jedi-order
    - old-republic
    - robot
    - rocket
    - space-awesome
    - user-astronaut
  label: Science Fiction
security:
  icons:
    - ban
    - bug
    - bug-slash
    - building-lock
    - building-shield
    - burst
    - car-on
    - door-closed
    - door-open
    - dungeon
    - explosion
    - eye
    - eye-slash
    - file-contract
    - file-shield
    - file-signature
    - fingerprint
    - gun
    - handcuffs
    - hands-bound
    - hands-holding-child
    - hands-holding-circle
    - house-fire
    - house-lock
    - id-badge
    - id-card
    - id-card-clip
    - key
    - land-mine-on
    - lock
    - lock-open
    - mars-and-venus-burst
    - mask
    - passport
    - people-pulling
    - people-robbery
    - person-burst
    - person-dress-burst
    - person-falling-burst
    - person-harassing
    - person-military-pointing
    - person-military-rifle
    - person-military-to-person
    - person-rifle
    - person-shelter
    - person-through-window
    - road-spikes
    - shield
    - shield-cat
    - shield-dog
    - shield-halved
    - shield-heart
    - skull-crossbones
    - square-person-confined
    - tower-observation
    - unlock
    - unlock-keyhole
    - user-lock
    - user-secret
    - user-shield
    - vault
  label: Security
shapes:
  icons:
    - bookmark
    - burst
    - calendar
    - certificate
    - circle
    - circle-half-stroke
    - cloud
    - clover
    - comment
    - crown
    - cubes-stacked
    - diamond
    - file
    - folder
    - heart
    - heart-crack
    - lines-leaning
    - location-pin
    - play
    - shapes
    - shield
    - square
    - star
    - ticket-simple
  label: Shapes
shopping:
  icons:
    - alipay
    - amazon-pay
    - apple-pay
    - bag-shopping
    - barcode
    - basket-shopping
    - bell
    - bitcoin
    - bookmark
    - btc
    - bullhorn
    - camera
    - camera-retro
    - cart-arrow-down
    - cart-plus
    - cart-shopping
    - cash-register
    - cc-amazon-pay
    - cc-amex
    - cc-apple-pay
    - cc-diners-club
    - cc-discover
    - cc-jcb
    - cc-mastercard
    - cc-paypal
    - cc-stripe
    - cc-visa
    - certificate
    - credit-card
    - ethereum
    - gem
    - gift
    - gifts
    - google-pay
    - google-wallet
    - handshake
    - heart
    - key
    - money-check
    - money-check-dollar
    - nfc-directional
    - nfc-symbol
    - paypal
    - person-booth
    - receipt
    - shirt
    - shop
    - shop-lock
    - shop-slash
    - star
    - store
    - store-slash
    - stripe
    - stripe-s
    - tag
    - tags
    - thumbs-down
    - thumbs-up
    - trophy
    - truck
    - truck-fast
  label: Shopping
social:
  icons:
    - bell
    - cake-candles
    - camera
    - circle-user
    - comment
    - envelope
    - hashtag
    - heart
    - icons
    - image
    - images
    - location-dot
    - location-pin
    - message
    - photo-film
    - retweet
    - share
    - share-from-square
    - share-nodes
    - square-poll-horizontal
    - square-poll-vertical
    - square-share-nodes
    - star
    - thumbs-down
    - thumbs-up
    - thumbtack
    - user
    - user-group
    - user-plus
    - users
    - video
  label: Social
spinners:
  icons:
    - arrows-spin
    - asterisk
    - atom
    - bahai
    - certificate
    - circle-notch
    - compact-disc
    - compass
    - crosshairs
    - dharmachakra
    - fan
    - gear
    - hurricane
    - life-ring
    - palette
    - ring
    - rotate
    - slash
    - snowflake
    - spinner
    - stroopwafel
    - sun
    - yin-yang
  label: Spinners
sports-fitness:
  icons:
    - baseball
    - baseball-bat-ball
    - basketball
    - bicycle
    - bowling-ball
    - broom-ball
    - dumbbell
    - fire-flame-curved
    - fire-flame-simple
    - football
    - futbol
    - golf-ball-tee
    - heart
    - heart-pulse
    - hockey-puck
    - medal
    - mound
    - person-biking
    - person-hiking
    - person-running
    - person-skating
    - person-skiing
    - person-skiing-nordic
    - person-snowboarding
    - person-swimming
    - person-walking
    - ranking-star
    - shoe-prints
    - spa
    - stopwatch-20
    - table-tennis-paddle-ball
    - volleyball
    - weight-hanging
  label: Sports + Fitness
text-formatting:
  icons:
    - align-center
    - align-justify
    - align-left
    - align-right
    - bold
    - border-all
    - border-none
    - border-top-left
    - check
    - check-double
    - circle-check
    - filter-circle-xmark
    - font
    - heading
    - highlighter
    - i-cursor
    - icons
    - indent
    - italic
    - list
    - list-check
    - list-ol
    - list-ul
    - outdent
    - paragraph
    - rectangle-list
    - spell-check
    - square-check
    - strikethrough
    - subscript
    - superscript
    - table
    - table-cells
    - table-cells-large
    - table-columns
    - table-list
    - text-height
    - text-slash
    - text-width
    - underline
  label: Text Formatting
time:
  icons:
    - bell
    - bell-slash
    - calendar
    - calendar-check
    - calendar-day
    - calendar-days
    - calendar-minus
    - calendar-plus
    - calendar-week
    - calendar-xmark
    - clock
    - hourglass
    - hourglass-end
    - hourglass-half
    - hourglass-start
    - stopwatch
    - stopwatch-20
  label: Time
toggle:
  icons:
    - bullseye
    - circle
    - circle-check
    - circle-dot
    - location-crosshairs
    - microphone
    - microphone-slash
    - plane-up
    - signal
    - star
    - star-half
    - star-half-stroke
    - toggle-off
    - toggle-on
    - wifi
  label: Toggle
transportation:
  icons:
    - accessible-icon
    - baby-carriage
    - bicycle
    - bus
    - bus-simple
    - cable-car
    - car
    - car-burst
    - car-rear
    - car-side
    - car-tunnel
    - cart-shopping
    - ferry
    - helicopter
    - horse
    - jet-fighter
    - jet-fighter-up
    - motorcycle
    - mound
    - paper-plane
    - plane
    - plane-slash
    - plane-up
    - road
    - road-barrier
    - road-spikes
    - rocket
    - sailboat
    - ship
    - shuttle-space
    - sleigh
    - snowplow
    - taxi
    - tractor
    - train
    - train-subway
    - train-tram
    - truck
    - truck-arrow-right
    - truck-droplet
    - truck-field
    - truck-field-un
    - truck-front
    - truck-medical
    - truck-monster
    - truck-pickup
    - truck-plane
    - van-shuttle
    - wheelchair
    - wheelchair-move
  label: Transportation
travel-hotel:
  icons:
    - archway
    - baby-carriage
    - ban-smoking
    - bath
    - bed
    - bell-concierge
    - book-atlas
    - briefcase
    - bus
    - bus-simple
    - cable-car
    - car
    - caravan
    - cart-flatbed-suitcase
    - dice
    - dice-five
    - door-closed
    - door-open
    - dumbbell
    - earth-africa
    - earth-americas
    - earth-asia
    - earth-europe
    - earth-oceania
    - elevator
    - hot-tub-person
    - hotel
    - infinity
    - key
    - kitchen-set
    - map
    - map-location
    - map-location-dot
    - martini-glass
    - martini-glass-citrus
    - martini-glass-empty
    - monument
    - mountain-city
    - mug-saucer
    - passport
    - person-swimming
    - person-walking-luggage
    - plane
    - plane-arrival
    - plane-circle-check
    - plane-circle-exclamation
    - plane-circle-xmark
    - plane-departure
    - plane-lock
    - plane-slash
    - plane-up
    - shower
    - smoking
    - snowflake
    - spa
    - stairs
    - suitcase
    - suitcase-rolling
    - taxi
    - toilet
    - toilet-paper
    - train-tram
    - tree-city
    - tv
    - umbrella-beach
    - utensils
    - van-shuttle
    - water-ladder
    - wheelchair
    - wheelchair-move
    - wifi
    - wine-glass
    - wine-glass-empty
  label: Travel + Hotel
users-people:
  icons:
    - accessible-icon
    - address-book
    - address-card
    - arrows-down-to-people
    - baby
    - bed
    - chalkboard-user
    - child
    - child-dress
    - child-reaching
    - children
    - circle-user
    - clipboard-user
    - elevator
    - face-frown
    - face-meh
    - face-smile
    - head-side-cough
    - head-side-cough-slash
    - head-side-mask
    - head-side-virus
    - hospital-user
    - hot-tub-person
    - house-chimney-user
    - house-user
    - id-badge
    - id-card
    - id-card-clip
    - image-portrait
    - mars-and-venus-burst
    - people-arrows
    - people-carry-box
    - people-group
    - people-line
    - people-pulling
    - people-robbery
    - people-roof
    - person
    - person-arrow-down-to-line
    - person-arrow-up-from-line
    - person-biking
    - person-booth
    - person-breastfeeding
    - person-burst
    - person-cane
    - person-chalkboard
    - person-circle-check
    - person-circle-exclamation
    - person-circle-minus
    - person-circle-plus
    - person-circle-question
    - person-circle-xmark
    - person-digging
    - person-dots-from-line
    - person-dress
    - person-dress-burst
    - person-drowning
    - person-falling
    - person-falling-burst
    - person-half-dress
    - person-harassing
    - person-hiking
    - person-military-pointing
    - person-military-rifle
    - person-military-to-person
    - person-praying
    - person-pregnant
    - person-rays
    - person-rifle
    - person-running
    - person-shelter
    - person-skating
    - person-skiing
    - person-skiing-nordic
    - person-snowboarding
    - person-swimming
    - person-through-window
    - person-walking
    - person-walking-arrow-loop-left
    - person-walking-arrow-right
    - person-walking-dashed-line-arrow-right
    - person-walking-luggage
    - person-walking-with-cane
    - poo
    - restroom
    - skull
    - square-person-confined
    - street-view
    - user
    - user-astronaut
    - user-check
    - user-clock
    - user-doctor
    - user-gear
    - user-graduate
    - user-group
    - user-injured
    - user-large
    - user-large-slash
    - user-lock
    - user-minus
    - user-ninja
    - user-nurse
    - user-pen
    - user-plus
    - user-secret
    - user-shield
    - user-slash
    - user-tag
    - user-tie
    - user-xmark
    - users
    - users-between-lines
    - users-gear
    - users-line
    - users-rays
    - users-rectangle
    - users-slash
    - users-viewfinder
    - wheelchair
    - wheelchair-move
  label: Users + People
weather:
  icons:
    - bolt
    - bolt-lightning
    - cloud
    - cloud-bolt
    - cloud-meatball
    - cloud-moon
    - cloud-moon-rain
    - cloud-rain
    - cloud-showers-heavy
    - cloud-showers-water
    - cloud-sun
    - cloud-sun-rain
    - house-tsunami
    - hurricane
    - icicles
    - meteor
    - moon
    - poo-storm
    - rainbow
    - smog
    - snowflake
    - sun
    - sun-plant-wilt
    - temperature-arrow-down
    - temperature-arrow-up
    - temperature-empty
    - temperature-full
    - temperature-half
    - temperature-high
    - temperature-low
    - temperature-quarter
    - temperature-three-quarters
    - tornado
    - umbrella
    - volcano
    - water
    - wind
  label: Weather
writing:
  icons:
    - blog
    - book
    - book-bookmark
    - bookmark
    - box-archive
    - envelope
    - envelope-open
    - eraser
    - file
    - file-lines
    - folder
    - folder-open
    - keyboard
    - newspaper
    - notdef
    - note-sticky
    - paper-plane
    - paperclip
    - paragraph
    - pen
    - pen-clip
    - pen-to-square
    - pencil
    - quote-left
    - quote-right
    - signature
    - square-pen
    - thumbtack
  label: Writing
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          